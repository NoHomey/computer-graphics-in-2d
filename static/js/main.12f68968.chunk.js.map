{"version":3,"sources":["store/actions/SetTask.ts","types/Task.ts","store/reducers/task.ts","types/PixelKind.ts","types/Color.ts","store/actions/SetPixelColor.ts","store/reducers/pixelColor.ts","store/actions/SetRasterDisplayRows.ts","store/actions/SetRasterDisplayCols.ts","store/actions/AddPixelToSelected.ts","store/actions/RemovePixelFromSelected.ts","store/actions/SetKindToPixel.ts","store/actions/ClearRasterDisplay.ts","utility/raster.ts","store/reducers/rasterDisplay.ts","store/actions/Resize.ts","store/reducers/screenSize.ts","store/reducers/rasterConfig.ts","store/actions/ChangeConfig.ts","store/reducers/configRaster.ts","store/actions/SetDelay.ts","store/reducers/delay.ts","store/actions/SetDashLength.ts","store/reducers/dashLength.ts","store/actions/EnableConfig.ts","types/SelectedPixels.ts","store/reducers/selectedPixels.ts","store/actions/DisableConfig.ts","store/reducers/config.ts","store/actions/SetPointerWidth.ts","store/reducers/pointerWidth.ts","store/actions/SetPointerHeight.ts","store/reducers/pointerHeight.ts","store/reducers/main.ts","store/actions/SelectPixel.ts","store/selectors/selectedPixels.ts","store/selectors/task.ts","store/sagas/selectPixel.ts","store/actions/Draw.ts","store/selectors/delay.ts","store/selectors/dashLength.ts","store/selectors/pointerWidth.ts","store/selectors/pointerHeight.ts","store/selectors/pixelKind.ts","store/sagas/draw.ts","store/sagas/root.ts","store/configure.ts","components/RasterDisplay.tsx","utility/pixelStyle.ts","utility/pixelMap.ts","store/selectors/pixelWidth.ts","store/selectors/pixelHeight.ts","store/selectors/pixelMap.ts","components/connected/Display.ts","utility/colors.ts","components/ColorPicker.tsx","components/connected/BackgroudColor.ts","components/connected/FillColor.ts","components/connected/ContourColor.ts","components/connected/ContrastColor.ts","components/PixelCount.tsx","components/connected/RowsCount.ts","components/connected/ColsCount.ts","store/selectors/disableConfig.ts","components/connected/ChangeConfig.tsx","components/RasterConfig.tsx","components/connected/Task.tsx","components/connected/Delay.tsx","components/connected/DashLength.tsx","components/PointerDimention.tsx","components/connected/PointerWidth.ts","components/connected/PointerHeight.ts","store/selectors/taskState.ts","components/connected/TaskFeedback.tsx","store/selectors/canDraw.ts","components/connected/DrawButton.tsx","components/connected/ClearButton.tsx","components/connected/TaskConfig.tsx","components/connected/Toolbar.tsx","components/AppBar.tsx","App.tsx","index.tsx"],"names":["SetTask","setTask","task","type","payload","Task","defaultTask","Task1","PixelKind","state","action","Color","SetPixelColor","setPixelColor","pixel","color","pixelKind","setBackgroundColor","Background","setFillColor","Fill","setContourColor","Contour","setContrastColor","Contrast","defaultColorMap","Green","Blue","Red","Gold","pixelColor","colorMap","SetRasterDisplayRows","setRasterDisplayRows","rows","SetRasterDisplayCols","setRasterDisplayCols","cols","AddPixelToSelected","defaultKind","addPixelToSelected","kind","RemovePixelFromSelected","removePixelFromSelected","SetKindToPixel","setKindToPixel","ClearRasterDisplay","clearRasterDisplay","raster","List","Array","fill","map","_","defaultState","display","x","y","setIn","rasterDisplay","Resize","resize","size","defaultScreenSize","window","width","innerWidth","height","innerHeight","screenSize","reducerMap","reducer","combineReducers","ChangeConfig","changeConfig","configRaster","SetDelay","setDelay","delay","SetDashLength","setDashLength","dashLength","EnableConfig","enableConfig","empty","Set","entry","has","selected","selectedPixels","DisableConfig","disableConfig","config","SetPointerWidth","setPointerWidth","pointerWidth","SetPointerHeight","setPointerHeight","pointerHeight","rasterConfig","add","delete","SelectPixel","selectPixel","selectPixelForTask1or2","selectPixelForTask3","handleSelectPixelAction","count","put","selector","Task2","Task3","select","selectedPixelsSelector","taskSelector","isSelected","takeEvery","Draw","draw","getIn","handleDrawAction","drawTask1","drawTask2","drawTask3","drawLine","drawRectangle","liangBarsky","delaySelector","delayMS","entries","toArray","x1","get","y1","x2","y2","call","a","b","c","d","dashLengthSelector","dx","Math","abs","dy","reverse","tmp","incUP","incDN","incX","incY","dashCounter","skip","i","pointerWidthSelector","pointerHeightSelector","point","circlePixelDrawer","xc","yc","xr","yr","r","floor","sqrt","xl","min","max","yb","yt","drawPoint","j","pixelKindSelector","newKind","clipt","q","t_in","t_out","visible","t","c1","console","log","c2","c3","c4","root","all","configure","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","addEventListener","dispatch","run","rootSaga","RasterDisplay","pixelMap","Grid","container","direction","justify","row","rowIndex","item","key","colIndex","style","onClick","pixelStyle","backgroundColor","minWidth","minHeight","border","pixelWidth","createSelector","pixelHeight","createPixelMap","Display","connect","colors","Crimson","DarkCyan","DarkGreen","DarkOrange","DodgerBlue","LawnGreen","LightSeaGreen","MediumBlue","Orange","Purple","SteelBlue","Indigo","FireBrick","DarkMagenta","useStyles","makeStyles","props","ColorPicker","handler","classes","labelId","label","FormControl","InputLabel","id","Select","value","onChange","event","newColor","target","filter","removeColor1","removeColor2","removeColor3","index","MenuItem","BackgroundColor","FillColor","ContourColor","ContrastColor","counts","generateCounts","PixelCount","val","newVal","RowsCount","ColsCount","Connected","disabled","Button","variant","RasterConfig","alignItems","onTaskChange","newTask","options","onDelayChange","newDelay","length","newDashLength","PointerDimention","PointerWidth","PointerHeight","taskState","currentTask","TaskFeedback","feedback","disable","Chip","canDrawTask1or2","canDraw","clear","Delay","TaskEnum","DashLength","AppBar","position","baseTheme","createMuiTheme","appTheme","typography","fontSize","configureStore","App","ThemeProvider","theme","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12f68968.chunk.js","sourcesContent":["import Task from '../../types/Task';\n\nexport const SetTask = 'set-task';\n\nexport interface SetTaskAction {\n    type: typeof SetTask,\n    payload: {\n        task: Task\n    }\n};\n\nexport function setTask(task: Task): SetTaskAction {\n    return {\n        type: SetTask,\n        payload: { task }\n    };\n};\n\nexport default setTask;","enum Task {\n    Task1,\n    Task2,\n    Task3\n};\n\nexport default Task;","import { SetTask, SetTaskAction } from '../actions/SetTask';\nimport Action from './Action';\nimport Task from '../../types/Task';\n\nconst defaultTask: Task = Task.Task1;\n\nfunction task(\n    state: Task = defaultTask,\n    action: Action | SetTaskAction\n): Task {\n    switch(action.type) {\n        case SetTask:\n            return (action as SetTaskAction).payload.task;\n        default: return state;\n    }\n}\n\nexport default task;","enum PixelKind {\n    Background = 0,\n    Fill = 1,\n    Contour = 2,\n    Contrast = 3\n};\n\nexport default PixelKind;","enum Color {\n    Blue = 'Blue',\n    Crimson = 'Crimson',\n    DarkCyan = 'DarkCyan',\n    DarkGreen = 'DarkGreen',\n    DarkOrange = 'DarkOrange',\n    DodgerBlue = 'DarkBlue',\n    Gold = 'Gold',\n    Green = 'Green',\n    LawnGreen = 'LawnGreen',\n    LightSeaGreen = 'LightSeaGreen',\n    MediumBlue = 'MediumBlue',\n    Orange = 'Orange',\n    Red = 'Red',\n    Purple = 'Purple',\n    SteelBlue = 'SteelBlue',\n    Indigo = 'Indigo',\n    FireBrick = 'FireBrick',\n    DarkMagenta = 'DarkMagenta'\n};\n\nexport default Color;","import PixelKind from '../../types/PixelKind';\nimport Color from '../../types/Color';\n\nexport const SetPixelColor = 'set-pixel-color';\n\nexport interface SetPixelColorAction {\n    type: typeof SetPixelColor,\n    payload: {\n        pixelKind: PixelKind,\n        color: Color\n    }\n};\n\nconst setPixelColor: (pixelKind: PixelKind) => (color: Color) => SetPixelColorAction\n= pixel => color => ({\n    type: SetPixelColor,\n    payload: { pixelKind: pixel, color }\n});\n\nexport const setBackgroundColor = setPixelColor(PixelKind.Background);\n\nexport const setFillColor = setPixelColor(PixelKind.Fill);\n\nexport const setContourColor = setPixelColor(PixelKind.Contour);\n\nexport const setContrastColor = setPixelColor(PixelKind.Contrast);","import { SetPixelColor, SetPixelColorAction } from '../actions/SetPixelColor';\nimport Action from './Action';\nimport ColorMap from '../../types/ColorMap';\nimport PixelKind from '../../types/PixelKind';\nimport Color from '../../types/Color';\n\nconst defaultColorMap: ColorMap = {\n    [PixelKind.Background]: Color.Green,\n    [PixelKind.Fill]: Color.Blue,\n    [PixelKind.Contour]: Color.Red,\n    [PixelKind.Contrast]: Color.Gold\n}\n\nfunction pixelColor(\n    state: ColorMap = defaultColorMap,\n    action: Action | SetPixelColorAction\n): ColorMap {\n    switch(action.type) {\n        case SetPixelColor:\n            return setColor(state, (action as SetPixelColorAction).payload);\n        default: return state\n    }\n}\n\nexport default pixelColor;\n\nfunction setColor(colorMap: ColorMap, payload: SetPixelColorAction['payload']): ColorMap {\n    return { ...colorMap, [payload.pixelKind] : payload.color };\n}","export const SetRasterDisplayRows = 'set-raster-display-rows';\n\nexport interface SetRasterDisplayRowsAction {\n    type: typeof SetRasterDisplayRows,\n    payload: {\n        rows: number\n    }\n};\n\nexport function setRasterDisplayRows(rows: number): SetRasterDisplayRowsAction {\n    return {\n        type: SetRasterDisplayRows,\n        payload: { rows }\n    };\n}\n\nexport default setRasterDisplayRows;","export const SetRasterDisplayCols = 'set-raster-display-cols';\n\nexport interface SetRasterDisplayColsAction {\n    type: typeof SetRasterDisplayCols,\n    payload: {\n        cols: number\n    }\n};\n\nexport function setRasterDisplayCols(cols: number): SetRasterDisplayColsAction {\n    return {\n        type: SetRasterDisplayCols,\n        payload: { cols }\n    };\n}\n\nexport default setRasterDisplayCols;","import Pixel from '../../types/Pixel';\nimport PixelKind from '../../types/PixelKind';\n\nexport const AddPixelToSelected = 'add-pixel-to-selected';\n\nexport interface AddPixelToSelectedAction {\n    type: typeof AddPixelToSelected,\n    payload: {\n        pixel: Pixel,\n        kind: PixelKind\n    }\n};\n\nconst defaultKind = PixelKind.Contour;\n\nexport function addPixelToSelected(pixel: Pixel, kind: PixelKind = defaultKind): AddPixelToSelectedAction {\n    return {\n        type: AddPixelToSelected,\n        payload: {\n            pixel,\n            kind\n        }\n    };\n};\n\nexport default addPixelToSelected;","import Pixel from '../../types/Pixel';\n\nexport const RemovePixelFromSelected = 'remove-pixel-from-selected';\n\nexport interface RemovePixelFromSelectedAction {\n    type: typeof RemovePixelFromSelected,\n    payload: Pixel\n};\n\nexport function removePixelFromSelected(pixel: Pixel): RemovePixelFromSelectedAction {\n    return {\n        type: RemovePixelFromSelected,\n        payload: pixel\n    };\n};\n\nexport default removePixelFromSelected;","import Pixel from \"../../types/Pixel\";\nimport PixelKind from \"../../types/PixelKind\";\n\nexport const SetKindToPixel = 'set-kind-to-pixel';\n\nexport interface SetKindToPixelAction {\n    type: typeof SetKindToPixel,\n    payload: {\n        pixel: Pixel,\n        pixelKind: PixelKind\n    } \n}\n\nexport function setKindToPixel(pixel: Pixel, pixelKind: PixelKind): SetKindToPixelAction {\n    return {\n        type: SetKindToPixel,\n        payload: {\n            pixel,\n            pixelKind\n        }\n    };\n};\n\nexport default setKindToPixel;","export const ClearRasterDisplay = 'clear-raster-display';\n\nexport interface ClearRasterDisplayAction {\n    type: typeof ClearRasterDisplay,\n};\n\nexport function clearRasterDisplay(): ClearRasterDisplayAction {\n    return { type: ClearRasterDisplay };\n};\n\nexport default clearRasterDisplay;","import Raster from '../types/Raster';\nimport PixelKind from '../types/PixelKind';\nimport { List } from 'immutable';\n\nfunction raster(rows: number, cols: number): Raster {\n    return List(\n        Array(rows).fill(PixelKind.Background).map(_ =>\n            List(Array(cols).fill(PixelKind.Background))\n        )\n    );\n}\n\nexport default raster;","import {\n    SetRasterDisplayRows,\n    SetRasterDisplayRowsAction\n} from '../actions/SetRasterDisplayRows';\nimport {\n    SetRasterDisplayCols,\n    SetRasterDisplayColsAction\n} from '../actions/SetRasterDisplayCols';\nimport {\n    AddPixelToSelected,\n    AddPixelToSelectedAction\n} from '../actions/AddPixelToSelected';\nimport {\n    RemovePixelFromSelected,\n    RemovePixelFromSelectedAction\n} from '../actions/RemovePixelFromSelected';\nimport { SetKindToPixel, SetKindToPixelAction } from '../actions/SetKindToPixel';\nimport { SetTask } from '../actions/SetTask';\nimport { ClearRasterDisplay } from '../actions/ClearRasterDisplay';\nimport Action from './Action';\nimport Raster from '../../types/Raster';\nimport raster from '../../utility/raster';\nimport Pixel from '../../types/Pixel';\nimport PixelKind from '../../types/PixelKind';\n\ninterface State {\n    rows: number,\n    cols: number,\n    display: Raster\n}\n\nconst defaultRasterDisplayRows = 16;\n\nconst defaultRasterDisplayCols = 32;\n\nconst defaultRasterDisplay = raster(defaultRasterDisplayRows, defaultRasterDisplayCols);\n\nconst defaultState: State = {\n    rows: defaultRasterDisplayRows,\n    cols: defaultRasterDisplayCols,\n    display: defaultRasterDisplay\n};\n\nfunction rasterDisplay(\n    state: State = defaultState,\n    action: Action | SetRasterDisplayRowsAction | SetRasterDisplayColsAction\n): State {\n    switch(action.type) {\n        case SetRasterDisplayRows: {\n            const { cols } = state;\n            const { rows } = (action as SetRasterDisplayRowsAction).payload;\n            return display({ rows, cols });\n        }\n        case SetRasterDisplayCols: {\n            const { rows } = state;\n            const { cols } = (action as SetRasterDisplayColsAction).payload;\n            return display({ rows, cols });\n        }\n        case SetKindToPixel: {\n            const { rows, cols } = state;\n            const { pixel, pixelKind } = (action as SetKindToPixelAction).payload;\n            if(pixel.x < 0 || pixel.x >= cols || pixel.y < 0 || pixel.y >= rows) {\n                return state;\n            }\n            return setKindToPixel(state, pixel, pixelKind);\n        }\n        case AddPixelToSelected: {\n            const { pixel, kind } = (action as AddPixelToSelectedAction).payload;\n            return setKindToPixel(state, pixel, kind);\n        }\n        case RemovePixelFromSelected: {\n            const pixel = (action as RemovePixelFromSelectedAction).payload;\n            return setKindToPixel(state, pixel, PixelKind.Background);\n        }\n        case SetTask: {\n            const { rows, cols } = state;\n            return display({ rows, cols });\n        }\n        case ClearRasterDisplay: {\n            const { rows, cols } = state;\n            return display({ rows, cols });\n        }\n        default: return state;\n    }\n}\n\nfunction display({ rows, cols }: { rows: number, cols: number }): State {\n    return {\n        rows,\n        cols,\n        display: raster(rows, cols)\n    };\n}\n\nfunction setKindToPixel(state: State, { x, y }: Pixel, pixelKind: PixelKind): State {\n    return {\n        ...state,\n        display: state.display.setIn([y, x], pixelKind)\n    };\n}\n\nexport default rasterDisplay;","import ScreenSize from '../../types/ScreenSize';\n\nexport const Resize = 'resize';\n\nexport interface ResizeAction {\n    type: typeof Resize,\n    payload: ScreenSize\n};\n\nexport function resize(size: ScreenSize): ResizeAction {\n    return { type: Resize, payload: size };\n};\n\nexport default resize;","import { Resize, ResizeAction } from '../actions/Resize';\nimport Action from './Action';\nimport ScreenSize from '../../types/ScreenSize';\n\nconst defaultScreenSize: ScreenSize =\ntypeof window === 'object'\n? {\n    width: window.innerWidth,\n    height: window.innerHeight\n} : {\n    width: 1080,\n    height: 720\n};\n\nfunction screenSize(\n    state: ScreenSize = defaultScreenSize,\n    action: Action | ResizeAction\n): ScreenSize {\n    switch(action.type) {\n        case Resize:\n            return (action as ResizeAction).payload;\n        default: return state\n    }\n}\n\nexport default screenSize;","import { combineReducers } from 'redux';\nimport pixelColor from './pixelColor';\nimport rasterDisplay from './rasterDisplay';\nimport screenSize from './screenSize';\n\nconst reducerMap = {\n    pixelColor,\n    rasterDisplay,\n    screenSize\n};\n\nexport const reducer = combineReducers(reducerMap);\n\nexport type State = ReturnType<typeof reducer>;\n\nexport default reducer;","export const ChangeConfig = 'chage-config';\n\nexport interface ChangeConfigAction {\n    type: typeof ChangeConfig,\n    payload: { }\n}\n\nexport function changeConfig(): ChangeConfigAction {\n    return {\n        type: ChangeConfig,\n        payload: { }\n    };\n};\n\nexport default changeConfig;","import { ChangeConfig, ChangeConfigAction } from '../actions/ChangeConfig';\nimport Action from './Action';\n\nfunction configRaster(\n    state: boolean = true,\n    action: Action | ChangeConfigAction\n): boolean {\n    switch(action.type) {\n        case ChangeConfig: return !state;\n        default: return state;\n    }\n}\n\nexport default configRaster;","export const SetDelay = 'set-delay';\n\nexport interface SetDelayAction {\n    type: typeof SetDelay,\n    payload: { delay: number }\n};\n\nexport function setDelay(delay: number): SetDelayAction {\n    return {\n        type: SetDelay,\n        payload: { delay }\n    };\n};\n\nexport default setDelay;","import { SetDelay, SetDelayAction } from '../actions/SetDelay';\nimport Action from './Action';\n\nfunction delay(state: number = 300, action: Action | SetDelayAction): number {\n    switch(action.type) {\n        case SetDelay:\n            return (action as SetDelayAction).payload.delay;\n        default: return state;\n    }\n}\n\nexport default delay;","export const SetDashLength = 'set-dash-length';\n\nexport interface SetDashLengthAction {\n    type: typeof SetDashLength,\n    payload: { dashLength: number }\n};\n\nexport function setDashLength(dashLength: number): SetDashLengthAction {\n    return {\n        type: SetDashLength,\n        payload: { dashLength }\n    };\n};\n\nexport default setDashLength;","import { SetDashLength, SetDashLengthAction } from '../actions/SetDashLength';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetDashLengthAction): number {\n    switch(action.type) {\n        case SetDashLength:\n            return (action as SetDashLengthAction).payload.dashLength;\n        default: return state;\n    }\n}\n\nexport default dashLength;","export const EnableConfig = 'enable-config';\n\nexport interface EnableConfigAction {\n    type: typeof EnableConfig\n};\n\nexport function enableConfig(): EnableConfigAction {\n    return { type: EnableConfig };\n};\n\nexport default enableConfig;","import { List, Set } from 'immutable';\nimport Pixel from './Pixel';\n\ntype SelectedPixels = Set<List<number>>;\n\nexport const empty = Set<List<number>>();\n\nexport function entry({ x, y } : Pixel): List<number> {\n    return List([ x, y ]);\n};\n\nexport function has(selected: SelectedPixels, pixel: Pixel): boolean {\n    return selected.has(entry(pixel));\n};\n\nexport default SelectedPixels;","import {\n    AddPixelToSelected,\n    AddPixelToSelectedAction\n} from '../actions/AddPixelToSelected';\nimport {\n    RemovePixelFromSelected,\n    RemovePixelFromSelectedAction\n} from '../actions/RemovePixelFromSelected';\nimport { SetTask } from '../actions/SetTask';\nimport { EnableConfig } from '../actions/EnableConfig';\nimport Action from './Action';\nimport SelectedPixels, { empty, entry } from '../../types/SelectedPixels';\n\nfunction selectedPixels(\n    state: SelectedPixels = empty,\n    action: Action | AddPixelToSelectedAction | RemovePixelFromSelectedAction\n): SelectedPixels {\n    switch(action.type) {\n        case AddPixelToSelected: {\n            const { pixel } = (action as AddPixelToSelectedAction).payload;\n            return state.add(entry(pixel));\n        }\n        case RemovePixelFromSelected: {\n            const pixel = (action as RemovePixelFromSelectedAction).payload;\n            return state.delete(entry(pixel));\n        }\n        case SetTask: return empty;\n        case EnableConfig: return empty;\n        default: return state;\n    }\n}\n\nexport default selectedPixels;","export const DisableConfig = 'disable-config';\n\nexport interface DisableConfigAction {\n    type: typeof DisableConfig\n};\n\nexport function disableConfig(): DisableConfigAction {\n    return { type: DisableConfig };\n};\n\nexport default disableConfig;","import { EnableConfig, EnableConfigAction } from '../actions/EnableConfig';\nimport { DisableConfig, DisableConfigAction } from '../actions/DisableConfig';\nimport Action from './Action';\n\nfunction config(\n    state: boolean = true,\n    action: Action | EnableConfigAction | DisableConfigAction\n): boolean {\n    switch(action.type) {\n        case EnableConfig: return true;\n        case DisableConfig: return false;\n        default: return state;\n    }\n}\n\nexport default config;","export const SetPointerWidth = 'set-pointer-width';\n\nexport interface SetPointerWidthAction {\n    type: typeof SetPointerWidth,\n    payload: { pointerWidth: number }\n};\n\nexport function setPointerWidth(pointerWidth: number): SetPointerWidthAction {\n    return {\n        type: SetPointerWidth,\n        payload: { pointerWidth }\n    };\n};\n\nexport default setPointerWidth;","import { SetPointerWidth, SetPointerWidthAction } from '../actions/SetPointerWidth';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetPointerWidthAction): number {\n    switch(action.type) {\n        case SetPointerWidth:\n            return (action as SetPointerWidthAction).payload.pointerWidth;\n        default: return state;\n    }\n}\n\nexport default dashLength;","export const SetPointerHeight = 'set-pointer-height';\n\nexport interface SetPointerHeightAction {\n    type: typeof SetPointerHeight,\n    payload: { pointerHeight: number }\n};\n\nexport function setPointerHeight(pointerHeight: number): SetPointerHeightAction {\n    return {\n        type: SetPointerHeight,\n        payload: { pointerHeight }\n    };\n};\n\nexport default setPointerHeight;","import { SetPointerHeight, SetPointerHeightAction } from '../actions/SetPointerHeight';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetPointerHeightAction): number {\n    switch(action.type) {\n        case SetPointerHeight:\n            return (action as SetPointerHeightAction).payload.pointerHeight;\n        default: return state;\n    }\n}\n\nexport default dashLength;","import { combineReducers } from 'redux';\nimport task from './task';\nimport rasterConfig from './rasterConfig';\nimport configRaster from './configRaster';\nimport delay from './delay';\nimport dashLength from './dashLength';\nimport selectedPixels from './selectedPixels';\nimport config from './config';\nimport pointerWidth from './pointerWidth';\nimport pointerHeight from './pointerHeight';\n\nconst reducerMap = {\n    task,\n    rasterConfig,\n    configRaster: configRaster,\n    delay,\n    dashLength,\n    selectedPixels,\n    config,\n    pointerWidth,\n    pointerHeight\n};\n\nexport const reducer = combineReducers(reducerMap);\n\nexport type State = ReturnType<typeof reducer>;\n\nexport default reducer;","import Pixel from '../../types/Pixel';\n\nexport const SelectPixel = 'select-pixel';\n\nexport interface SelectPixelAction {\n    type: typeof SelectPixel,\n    payload: Pixel\n}\n\nexport function selectPixel(pixel: Pixel): SelectPixelAction {\n    return { type: SelectPixel, payload: pixel };\n}\n\nexport default selectPixel;","import { State } from '../reducers/main';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nfunction selectedPixels(state: State): SelectedPixels {\n    return state.selectedPixels;\n}\n\nexport default selectedPixels;","import { State } from '../reducers/main';\nimport Task from '../../types/Task';\n\nfunction task(state: State): Task {\n    return state.task;\n}\n\nexport default task;","import { takeEvery, select, put } from 'redux-saga/effects'\nimport { SelectPixel, SelectPixelAction } from '../actions/SelectPixel';\nimport selectedPixelsSelector from '../selectors/selectedPixels';\nimport taskSelector from '../selectors/task';\nimport SelectedPixels, { has } from '../../types/SelectedPixels';\nimport addPixelToSelected from '../actions/AddPixelToSelected';\nimport removePixelFromSelected from '../actions/RemovePixelFromSelected';\nimport Task from '../../types/Task';\nimport Pixel from '../../types/Pixel';\nimport PixelKind from '../../types/PixelKind';\n\nfunction* selectPixelForTask1or2(pixel: Pixel, count: number) {\n    if(count < 2) {\n        return yield put(addPixelToSelected(pixel));\n    }\n}\n\nfunction* selectPixelForTask3(pixel: Pixel, count: number) {\n    if(count < 2) {\n        return yield put(addPixelToSelected(pixel, PixelKind.Fill));\n    }\n    if(count < 4) {\n        return yield put(addPixelToSelected(pixel, PixelKind.Contour));\n    }\n}\n\nconst selector = {\n    [Task.Task1]: selectPixelForTask1or2,\n    [Task.Task2]: selectPixelForTask1or2,\n    [Task.Task3]: selectPixelForTask3\n}\n\nfunction* handleSelectPixelAction({ payload }: SelectPixelAction) {\n    const pixel = payload;\n    const selectedPixels: SelectedPixels = yield select(selectedPixelsSelector);\n    const task: Task = yield select(taskSelector);\n    const isSelected = has(selectedPixels, pixel);\n    const count = selectedPixels.size;\n    if(isSelected) {\n        return yield put(removePixelFromSelected(pixel));\n    } else {\n        return yield selector[task](pixel, count);\n    }\n}\n\nfunction* selectPixel() {\n    yield takeEvery(SelectPixel, handleSelectPixelAction);\n}\n\nexport default selectPixel;","export const Draw = 'draw';\n\nexport interface DrawAction {\n    type: typeof Draw\n}\n\nexport function draw(): DrawAction {\n    return { type: Draw };\n};\n\nexport default draw;","import { State } from '../reducers/main';\n\nfunction delay(state: State): number {\n    return state.delay;\n}\n\nexport default delay;","import { State } from '../reducers/main';\n\nfunction dashLength(state: State): number {\n    return state.dashLength;\n}\n\nexport default dashLength;","import { State } from '../reducers/main';\n\nfunction pointerWidth(state: State): number {\n    return state.pointerWidth;\n}\n\nexport default pointerWidth;","import { State } from '../reducers/main';\n\nfunction pointerHeight(state: State): number {\n    return state.pointerHeight;\n}\n\nexport default pointerHeight;","import Pixel from \"../../types/Pixel\";\nimport PixelKind from \"../../types/PixelKind\";\nimport { State } from \"../reducers/main\";\n\nfunction pixelKind(state: State, { x, y }: Pixel): PixelKind {\n    return state.rasterConfig.rasterDisplay.display.getIn([y, x]);\n}\n\nexport default pixelKind;","import { takeEvery, select, put, delay, call } from 'redux-saga/effects'\nimport { Draw } from '../actions/Draw';\nimport PixelKind from '../../types/PixelKind';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\nimport setKindToPixel from '../actions/SetKindToPixel';\nimport disableConfig from '../actions/DisableConfig';\nimport enableConfig from '../actions/EnableConfig';\nimport selectedPixelsSelector from '../selectors/selectedPixels';\nimport delaySelector from '../selectors/delay';\nimport dashLengthSelector from '../selectors/dashLength';\nimport taskSelector from '../selectors/task';\nimport pointerWidthSelector from '../selectors/pointerWidth';\nimport pointerHeightSelector from '../selectors/pointerHeight';\nimport pixelKindSelector from '../selectors/pixelKind';\nimport Pixel from '../../types/Pixel';\n\nfunction* handleDrawAction() {\n    const selected: SelectedPixels = yield select(selectedPixelsSelector);\n    const delayMS: number = yield select(delaySelector);\n    const task: Task = yield select(taskSelector);\n    const entries = selected.toArray();\n    const x1 = entries[0].get(0) as number;\n    const y1 = entries[0].get(1) as number;\n    const x2 = entries[1].get(0) as number;\n    const y2 = entries[1].get(1) as number;\n    yield put(disableConfig());\n    if(task !== Task.Task3) {\n        yield call(task === Task.Task1 ? drawTask1 : drawTask2, delayMS, x1, y1, x2, y2);\n    } else {\n        const a = entries[2].get(0) as number;\n        const b = entries[2].get(1) as number;\n        const c = entries[3].get(0) as number;\n        const d = entries[3].get(1) as number;\n        yield call(drawTask3, delayMS, x1, y1, x2, y2, a, b, c, d);\n    }\n    yield put(enableConfig());\n}\n\nfunction* draw() {\n    yield takeEvery(Draw, handleDrawAction);\n}\n\nexport default draw;\n\nfunction* drawTask1(delayMS: number, x1: number, y1: number, x2: number, y2: number) {\n    const dashLength: number = yield select(dashLengthSelector);\n    yield put(setKindToPixel({ x: x1, y: y1 }, PixelKind.Background));\n    yield delay(delayMS);\n    yield put(setKindToPixel({ x: x2, y: y2 }, PixelKind.Background));\n    let dx = Math.abs(x2 - x1);\n    let dy = Math.abs(y2 - y1);\n    const reverse = dx < dy;\n    if(reverse) {\n        let tmp = x1;\n        x1 = y1;\n        y1 = tmp;\n        tmp = x2;\n        x2 = y2;\n        y2 = tmp;\n        tmp = dx;\n        dx = dy;\n        dy = tmp;\n    }\n    const incUP = (-2) * dx + 2 * dy;\n    const incDN = 2 * dy;\n    const incX = x1 <= x2 ? 1 : -1;\n    const incY = y1 <= y2 ? 1 : -1;\n    let d = -dx + 2 * dy;\n    let x = x1;\n    let y = y1;\n    let dashCounter = 0;\n    let skip = false;\n    for(let i = 0; i <= dx; ++i) {\n        if(!skip) {\n            yield delay(delayMS);\n            if(reverse) {\n                yield put(setKindToPixel({ x: y, y: x }, PixelKind.Contour));\n            } else {\n                yield put(setKindToPixel({ x, y }, PixelKind.Contour));\n            }\n        }\n        ++dashCounter;\n        if(dashCounter === dashLength) {\n            skip = !skip;\n            dashCounter = 0;        \n        }\n        x += incX;\n        if(d > 0) {\n            d += incUP;\n            y += incY;\n        } else {\n            d += incDN;\n        }\n    }\n}\n\nfunction* drawTask2(delayMS: number, x1: number, y1: number, x2: number, y2: number) {\n    const pointerWidth = yield select(pointerWidthSelector);\n    const pointerHeight = yield select(pointerHeightSelector);\n    const point = circlePixelDrawer(delayMS, pointerWidth, pointerHeight);\n    yield put(setKindToPixel({ x: x1, y: y1 }, PixelKind.Background));\n    yield delay(delayMS);\n    yield put(setKindToPixel({ x: x2, y: y2 }, PixelKind.Background));\n    yield delay(delayMS);\n    const xc = x1;\n    const yc = y1;\n    const xr = x2 - x1;\n    const yr = y2 - y1;\n    const r = Math.floor(Math.sqrt((xr * xr) + (yr * yr)) + 0.5);\n    let x = 0;\n    let y = r;\n    let d = 2 - 2 * r;\n    yield point(xc, yc + r);\n    yield delay(delayMS);\n    yield point(xc, yc - r);\n    yield delay(delayMS);\n    yield point(xc + r, yc);\n    yield delay(delayMS);\n    yield point(xc - r, yc);\n    while(true) {\n        if(d > - y) {\n            --y;\n            d += 1 - 2 * y;\n        }\n        if(d <= x) {\n            ++x;\n            d += 1 + 2 * x;\n        }\n        if(y < 0) {\n            return;\n        };\n        yield point(xc + x, yc + y);\n        yield point(xc + x, yc - y);\n        yield point(xc - x, yc + y);\n        yield point(xc - x, yc - y);\n    }\n}\n\nfunction* drawTask3(delayMS: number, x1: number, y1: number, x2: number, y2: number, a: number, b: number, c: number, d: number) {\n    yield drawLine({ x: x1, y: y1 }, { x: x2, y: y2 }, delayMS, PixelKind.Fill);\n    const xl = Math.min(a, c);\n    const xr = Math.max(a, c);\n    const yb = Math.min(b, d);\n    const yt = Math.max(b, d);\n    yield drawRectangle(xl, xr, yb, yt, delayMS);\n    yield liangBarsky(delayMS, x1, y1, x2, y2, xl, xr, yb, yt);\n}\n\nfunction circlePixelDrawer(delayMS: number, width: number, height: number) {\n    const xc = Math.floor(width / 2);\n    const yc = Math.floor(height / 2);\n    return function* drawPoint(x: number, y: number) {\n        for(let i = 0; i < width; ++i) {\n            for(let j = 0; j < height; ++j) {\n                const px = x - xc + i;\n                const py = y - yc + j;\n                const pixel: Pixel = { x: px, y: py };\n                const kind: PixelKind = yield select(pixelKindSelector, pixel);\n                let newKind: PixelKind = PixelKind.Fill;\n                if(kind !== PixelKind.Background) {\n                    newKind = PixelKind.Contrast;\n                }\n                if((i === xc && j === yc) || kind === PixelKind.Contour) {\n                    newKind = PixelKind.Contour;\n                }\n                yield delay(delayMS);\n                yield put(setKindToPixel(pixel, newKind));\n            }\n        }\n    }\n}\n\nfunction* drawLine(\n    { x: x1, y: y1 } : Pixel,\n    { x: x2, y: y2 }: Pixel,\n    delayMS: number,\n    pixelKind: PixelKind\n) {\n    yield put(setKindToPixel({ x: x1, y: y1 }, PixelKind.Background));\n    yield delay(delayMS);\n    yield put(setKindToPixel({ x: x2, y: y2 }, PixelKind.Background));\n    let dx = Math.abs(x2 - x1);\n    let dy = Math.abs(y2 - y1);\n    const reverse = dx < dy;\n    if(reverse) {\n        let tmp = x1;\n        x1 = y1;\n        y1 = tmp;\n        tmp = x2;\n        x2 = y2;\n        y2 = tmp;\n        tmp = dx;\n        dx = dy;\n        dy = tmp;\n    }\n    const incUP = (-2) * dx + 2 * dy;\n    const incDN = 2 * dy;\n    const incX = x1 <= x2 ? 1 : -1;\n    const incY = y1 <= y2 ? 1 : -1;\n    let d = -dx + 2 * dy;\n    let x = x1;\n    let y = y1;\n    for(let i = 0; i <= dx; ++i) {\n        yield delay(delayMS);\n        if(reverse) {\n            yield put(setKindToPixel({ x: y, y: x }, pixelKind));\n        } else {\n            yield put(setKindToPixel({ x, y }, pixelKind));\n        }\n        x += incX;\n        if(d > 0) {\n            d += incUP;\n            y += incY;\n        } else {\n            d += incDN;\n        }\n    }\n}\n\nfunction* drawRectangle(xl: number, xr: number, yb: number, yt: number, delayMS: number) {\n    for(let x = xl; x <= xr; ++x) {\n        yield put(setKindToPixel({ x, y: yb }, PixelKind.Contour));\n    }\n    yield delay(delayMS);\n    for(let y = yb; y <= yt; ++y) {\n        yield put(setKindToPixel({ x: xr, y }, PixelKind.Contour));\n    }\n    yield delay(delayMS);\n    for(let x = xr; x >= xl; --x) {\n        yield put(setKindToPixel({ x, y: yt }, PixelKind.Contour));\n    }\n    yield delay(delayMS);\n    for(let y = yt; y >= yb; --y) {\n        yield put(setKindToPixel({ x: xl, y }, PixelKind.Contour));\n    }\n}\n\nfunction clipt(r: number, q: number, t_in: number, t_out: number): { visible: boolean, t_in: number, t_out: number } {\n    let visible = true;\n    if(r > 0) {\n        const t = q / r;\n        if(t < t_in) {\n            visible = false;\n        } else {\n            t_out = Math.min(t, t_out);\n        }\n    }\n    if(r < 0) {\n        const t = q / r;\n        if(t > t_out) {\n            visible = false;\n        } else {\n            t_in = Math.max(t, t_in);\n        }\n    }\n    if(q < 0) {\n        visible = false;\n    }\n    return { visible, t_in, t_out };\n}\n\nfunction* liangBarsky(delayMS: number, x1: number, y1: number, x2: number, y2: number, xl: number, xr: number, yb: number, yt: number) {\n    let t_in = 0;\n    let t_out = 1;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const c1 = clipt(-dx, xr - x1, t_in, t_out);\n    console.log(c1);\n    if(c1.visible) {\n        const c2 = clipt(dx, x1 - xl, c1.t_in, c1.t_out);\n        console.log(c2);\n        if(c2.visible) {\n            const c3 = clipt(-dy, yt - y1, c2.t_in, c2.t_out);\n            console.log(c3);\n            if(c3.visible) {\n                const c4 = clipt(dy, y1 - yb, c3.t_in, c3.t_out);\n                console.log(c4);\n                if(c4.visible) {\n                    if(t_in > 0) {\n                        x1 = Math.floor(x1 + c4.t_in * dx);\n                        y1 = Math.floor(y1 + c4.t_in * dy);\n                    }\n                    if(t_out < 1) {\n                        x2 = Math.floor(x1 + c4.t_out * dx);\n                        y2 = Math.floor(y1 + c4.t_out * dy);\n                    }\n                    yield drawLine({ x: x1, y: y1 }, { x: x2, y: y2 }, delayMS, PixelKind.Contrast);\n                }\n            }\n        }\n    }\n}","import { all } from 'redux-saga/effects';\nimport selectPixel from './selectPixel';\nimport draw from './draw';\n\nfunction* root() {\n    yield all([selectPixel(), draw()]);\n}\n\nexport default root;","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducers/main';\nimport ScreenSize from '../types/ScreenSize';\nimport resize from './actions/Resize';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/root';\n\nfunction configure() {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n    if(typeof window === 'object') {\n        window.addEventListener('resize', () => {\n            const size: ScreenSize = {\n                width: window.innerWidth,\n                height: window.innerHeight\n            };\n            store.dispatch(resize(size));\n        });\n    }\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n}\n\nexport default configure;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Raster from '../types/Raster';\nimport PixelMap from '../types/PixelMap';\nimport Action from '../store/reducers/Action';\nimport selectPixel from '../store/actions/SelectPixel';\n\ninterface Props {\n    raster: Raster,\n    pixelMap: PixelMap,\n    dispatch: (action: Action) => void\n};\n\nconst RasterDisplay: React.FC<Props> = ({raster, pixelMap, dispatch}) => (\n    <Grid container direction='column' justify='center'>\n    {\n        raster.reverse().map((row, rowIndex) => (\n            <Grid item container direction='row' justify='center' key={rowIndex}>\n            {\n                row.map((pixel, colIndex) => (\n                    <Grid\n                        item\n                        style={pixelMap[pixel]}\n                        onClick={() => dispatch(selectPixel({ x: colIndex, y: raster.size - 1 - rowIndex }))}\n                        key={(rowIndex + 1) * (colIndex + 1)} />\n                ))\n            }\n            </Grid>           \n        ))\n    }\n    </Grid>\n);\n\nexport default RasterDisplay;","import Color from '../types/Color';\nimport PixelStyle from '../types/PixelStyle';\n\nfunction pixelStyle(color: Color, width: number, height: number): PixelStyle {\n    return {\n        backgroundColor: color,\n        minWidth: width,\n        minHeight: height,\n        border: '1px solid white'\n    };\n}\n\nexport default pixelStyle;","import PixelKind from '../types/PixelKind';\nimport PixelMap from '../types/PixelMap';\nimport ColorMap from '../types/ColorMap';\nimport pixelStyle from './pixelStyle';\n\nfunction pixelMap(colorMap: ColorMap, width: number, height: number): PixelMap {\n    return {\n        [PixelKind.Background]: pixelStyle(colorMap[PixelKind.Background], width, height),\n        [PixelKind.Fill]: pixelStyle(colorMap[PixelKind.Fill], width, height),\n        [PixelKind.Contour]: pixelStyle(colorMap[PixelKind.Contour], width, height),\n        [PixelKind.Contrast]: pixelStyle(colorMap[PixelKind.Contrast], width, height)\n    }\n};\n\nexport default pixelMap;\n","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\n\nconst pixelWidth = createSelector(\n    (state: State) => state.rasterConfig.screenSize.width,\n    (state: State) => state.rasterConfig.rasterDisplay.cols,\n    (width: number, cols: number) => Math.floor(width / cols)\n);\n\nexport default pixelWidth;","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\n\nconst pixelHeight = createSelector(\n    (state: State) => state.rasterConfig.screenSize.height,\n    (state: State) => state.rasterConfig.rasterDisplay.rows,\n    (height: number, rows: number) => Math.floor((height - 61) / rows)\n);\n\nexport default pixelHeight;","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\nimport createPixelMap from '../../utility/pixelMap';\nimport pixelWidth from './pixelWidth';\nimport pixelHeight from './pixelHeight';\n\nconst pixelMap = createSelector(\n    (state: State) => state.rasterConfig.pixelColor,\n    pixelWidth,\n    pixelHeight,\n    createPixelMap\n);\n\nexport default pixelMap;","import { connect } from 'react-redux';\nimport RasterDisplay from '../RasterDisplay';\nimport { State } from '../../store/reducers/main';\nimport pixelMap from '../../store/selectors/pixelMap';\n\nconst Display = connect(\n    (state: State) => ({\n        raster: state.rasterConfig.rasterDisplay.display,\n        pixelMap: pixelMap(state)\n    }),\n)(RasterDisplay);\n\nexport default Display;","import Color from '../types/Color';\n\nconst colors = [\n    Color.Blue,\n    Color.Crimson,\n    Color.DarkCyan,\n    Color.DarkGreen,\n    Color.DarkOrange,\n    Color.DodgerBlue,\n    Color.Gold,\n    Color.Green,\n    Color.LawnGreen,\n    Color.LightSeaGreen,\n    Color.MediumBlue,\n    Color.Orange,\n    Color.Red,\n    Color.Purple,\n    Color.SteelBlue,\n    Color.Indigo,\n    Color.FireBrick,\n    Color.DarkMagenta\n];\n\nexport default colors;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Color from '../types/Color';\nimport colors from '../utility/colors';\n\ninterface Props {\n    label: string\n    selected: Color,\n    removeColor1: Color,\n    removeColor2: Color,\n    removeColor3: Color,\n    onChange: (newColor: Color) => void\n};\n\nconst useStyles = makeStyles({\n    select: {\n        color: (props: Props) => props.selected\n    }\n});\n\nconst ColorPicker: React.FC<Props> = props => {\n    const classes = useStyles(props);\n    const labelId = 'color-picker-' + props.label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{props.label}</InputLabel>\n            <Select\n                classes={{\n                    select: classes.select\n                }}\n                labelId={labelId}\n                value={props.selected}\n                onChange={handleChange(props.selected, props.onChange)}\n            >\n                {colors.filter(c => c !== props.removeColor1 && c !== props.removeColor2 && c !== props.removeColor3).map((color, index) => (\n                    <MenuItem key={`${index}-${color}`}  value={color} style={{ color }}>{color}</MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default ColorPicker;\n\nfunction handleChange(color: Color, handler: (newColor: Color) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newColor = event.target.value as Color;\n        if(newColor !== color){\n            handler(newColor);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setBackgroundColor } from '../../store/actions/SetPixelColor';\n\nconst BackgroundColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Background',\n        selected: pixelColor[PixelKind.Background],\n        removeColor1: pixelColor[PixelKind.Fill],\n        removeColor2: pixelColor[PixelKind.Contour],\n        removeColor3: pixelColor[PixelKind.Contrast]\n    }),\n    { onChange: setBackgroundColor }\n)(ColorPicker)\n\nexport default BackgroundColor;","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setFillColor } from '../../store/actions/SetPixelColor';\n\nconst FillColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Fill',\n        selected: pixelColor[PixelKind.Fill],\n        removeColor1: pixelColor[PixelKind.Background],\n        removeColor2: pixelColor[PixelKind.Contour],\n        removeColor3: pixelColor[PixelKind.Contrast]\n    }),\n    { onChange: setFillColor }\n)(ColorPicker)\n\nexport default FillColor;","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setContourColor } from '../../store/actions/SetPixelColor';\n\nconst ContourColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Contour',\n        selected: pixelColor[PixelKind.Contour],\n        removeColor1: pixelColor[PixelKind.Fill],\n        removeColor2: pixelColor[PixelKind.Background],\n        removeColor3: pixelColor[PixelKind.Contrast]\n    }),\n    { onChange: setContourColor }\n)(ColorPicker)\n\nexport default ContourColor;","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setContrastColor } from '../../store/actions/SetPixelColor';\n\nconst ContrastColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Contrast',\n        selected: pixelColor[PixelKind.Contrast],\n        removeColor1: pixelColor[PixelKind.Background],\n        removeColor2: pixelColor[PixelKind.Contour],\n        removeColor3: pixelColor[PixelKind.Fill]\n    }),\n    { onChange: setContrastColor }\n)(ColorPicker)\n\nexport default ContrastColor;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\ninterface Props {\n    label: string\n    value: number,\n    onChange: (newValue: number) => void\n};\n\nconst counts = generateCounts().map((count, index) => <MenuItem value={count} key={index}>{count}</MenuItem>);\n\nconst PixelCount: React.FC<Props> = ({label, value, onChange}) => {\n    const labelId = 'pixel-count-' + label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{label}</InputLabel>\n            <Select\n                labelId={labelId}\n                value={value}\n                onChange={handleChange(value, onChange)}\n            >\n                {counts}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default PixelCount;\n\nfunction generateCounts(): number[] {\n    const counts = new Array(80 - 10 + 1);\n    for(let i = 10; i <= 80; ++i) {\n        counts[i - 10] = i;\n    }\n    return counts;\n}\n\nfunction handleChange(val: number, handler: (newVal: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newVal = event.target.value as number;\n        if(newVal !== val){\n            handler(newVal);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport PixelCount from '../PixelCount';\nimport { State } from '../../store/reducers/main';\nimport { setRasterDisplayRows } from '../../store/actions/SetRasterDisplayRows';\n\nconst RowsCount = connect(\n    (state: State) => ({\n        label: 'Rows',\n        value: state.rasterConfig.rasterDisplay.rows\n    }),\n    { onChange: setRasterDisplayRows }\n)(PixelCount);\n\nexport default RowsCount;","import { connect } from 'react-redux';\nimport PixelCount from '../PixelCount';\nimport { State } from '../../store/reducers/main';\nimport { setRasterDisplayCols } from '../../store/actions/SetRasterDisplayCols';\n\nconst ColsCount = connect(\n    (state: State) => ({\n        label: 'Cols',\n        value: state.rasterConfig.rasterDisplay.cols\n    }),\n    { onChange: setRasterDisplayCols }\n)(PixelCount);\n\nexport default ColsCount;","import { State } from '../reducers/main';\n\nfunction disableConfig(state: State): boolean {\n    return !state.config;\n}\n\nexport default disableConfig;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { changeConfig } from '../../store/actions/ChangeConfig';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport { State } from '../../store/reducers/main';\n\ninterface Props {\n    configRaster: boolean,\n    disabled: boolean,\n    changeConfig: () => void\n}\n\nconst ChangeConfig: React.FC<Props> = props => (\n    <Button\n        color={props.configRaster ? \"primary\" : \"secondary\"}\n        onClick={props.changeConfig}\n        variant={props.configRaster ? \"contained\" : \"outlined\"}\n        disabled={props.disabled}>\n        {props.configRaster ? \"Next\" : \"Back\"}\n    </Button>\n);\n\nconst Connected = connect(\n    (state: State) => ({ disabled: disableConfig(state) }),\n    { changeConfig }\n)(ChangeConfig);\n\nexport default Connected;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport BackgroundColor from './connected/BackgroudColor';\nimport FillColor from './connected/FillColor';\nimport ContourColor from './connected/ContourColor';\nimport ContrastColor from './connected/ContrastColor';\nimport RowsCount from './connected/RowsCount';\nimport ColsCount from './connected/ColsCount';\nimport ChangeConfig from './connected/ChangeConfig';\n\nconst RasterConfig: React.FC = () => (\n    <Grid container direction='row' justify='space-evenly' alignItems='center'>\n        <Grid item><BackgroundColor/></Grid>\n        <Grid item><FillColor/></Grid>\n        <Grid item><ContourColor/></Grid>\n        <Grid item><ContrastColor/></Grid>\n        <Grid item><RowsCount/></Grid>\n        <Grid item><ColsCount/></Grid>\n        <Grid item><ChangeConfig configRaster/></Grid>\n    </Grid>\n);\n\nexport default RasterConfig;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Task from '../../types/Task';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setTask } from '../../store/actions/SetTask';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport task from '../../store/selectors/task';\n\ninterface Props {\n    task: Task,\n    disabled: boolean,\n    onTaskChange: (task: Task) => void\n};\n\nconst TaskSelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"task\">{\"Task\"}</InputLabel>\n            <Select\n                labelId=\"task\"\n                value={props.task}\n                disabled={props.disabled}\n                onChange={handleChange(props.task, props.onTaskChange)}\n            >\n                <MenuItem value={Task.Task1}>{\"Task 1\"}</MenuItem>\n                <MenuItem value={Task.Task2}>{\"Task 2\"}</MenuItem>\n                <MenuItem value={Task.Task3}>{\"Task 3\"}</MenuItem>\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(task: Task, handler: (newTask: Task) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newTask = event.target.value as Task;\n        if(newTask !== task){\n            handler(newTask);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ task: task(state), disabled: disableConfig(state) }),\n    { onTaskChange: setTask }\n)(TaskSelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setDelay } from '../../store/actions/SetDelay';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport delay from '../../store/selectors/delay';\n\ninterface Props {\n    delay: number,\n    disabled: boolean,\n    onDelayChange: (delay: number) => void\n};\n\nconst options\n= [100, 200, 300, 500, 700, 800, 1000, 1200, 1500]\n.map(\ndelay => (<MenuItem key={delay} value={delay}>\n    {delay < 1000 ? `${delay} ms` : `${delay / 1000} sec` }\n</MenuItem>)\n);\n\nconst DelaySelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"delay\">{\"Delay\"}</InputLabel>\n            <Select\n                labelId=\"delay\"\n                value={props.delay}\n                disabled={props.disabled}\n                onChange={handleChange(props.delay, props.onDelayChange)}\n            >\n                {options}\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(delay: number, handler: (newDelay: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newDelay = event.target.value as number;\n        if(newDelay !== delay){\n            handler(newDelay);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ delay: delay(state), disabled: disableConfig(state) }),\n    { onDelayChange: setDelay }\n)(DelaySelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setDashLength } from '../../store/actions/SetDashLength';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport dashLength from '../../store/selectors/dashLength';\n\ninterface Props {\n    dashLength: number,\n    disabled: boolean,\n    onDelayChange: (dashLength: number) => void\n};\n\nconst options\n= [1, 2, 3, 4, 5]\n.map(\nlength => (<MenuItem key={length} value={length}>{`${length} pixels`}</MenuItem>)\n);\n\nconst DashLengthSelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"dash-length\">{\"Dash\"}</InputLabel>\n            <Select\n                labelId=\"dash-length\"\n                value={props.dashLength}\n                disabled={props.disabled}\n                onChange={handleChange(props.dashLength, props.onDelayChange)}\n            >\n                {options}\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(dashLength: number, handler: (newDashLength: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newDashLength = event.target.value as number;\n        if(newDashLength !== dashLength){\n            handler(newDashLength);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ dashLength: dashLength(state), disabled: disableConfig(state) }),\n    { onDelayChange: setDashLength }\n)(DashLengthSelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\ninterface Props {\n    label: string\n    value: number,\n    disabled: boolean,\n    onChange: (newValue: number) => void\n};\n\nconst counts = [1, 2, 3, 4, 5].map((count, index) => <MenuItem value={count} key={index}>{count}</MenuItem>);\n\nconst PointerDimention: React.FC<Props> = ({label, value, disabled, onChange}) => {\n    const labelId = 'pointer-' + label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{label}</InputLabel>\n            <Select\n                labelId={labelId}\n                value={value}\n                disabled={disabled}\n                onChange={handleChange(value, onChange)}\n            >\n                {counts}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default PointerDimention;\n\nfunction handleChange(val: number, handler: (newVal: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newVal = event.target.value as number;\n        if(newVal !== val){\n            handler(newVal);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport PointerDimention from '../PointerDimention';\nimport { State } from '../../store/reducers/main';\nimport setPointerWidth from '../../store/actions/SetPointerWidth';\nimport pointerWidth from '../../store/selectors/pointerWidth';\nimport disableConfig from '../../store/selectors/disableConfig';\n\nconst PointerWidth = connect(\n    (state: State) => ({\n        label: 'Width',\n        disabled: disableConfig(state),\n        value: pointerWidth(state)\n    }),\n    { onChange: setPointerWidth }\n)(PointerDimention);\n\nexport default PointerWidth;","import { connect } from 'react-redux';\nimport PointerDimention from '../PointerDimention';\nimport { State } from '../../store/reducers/main';\nimport setPointerHeight from '../../store/actions/SetPointerHeight';\nimport pointerHeight from '../../store/selectors/pointerHeight';\nimport disableConfig from '../../store/selectors/disableConfig';\n\nconst PointerHeight = connect(\n    (state: State) => ({\n        label: 'Height',\n        disabled: disableConfig(state),\n        value: pointerHeight(state)\n    }),\n    { onChange: setPointerHeight }\n)(PointerDimention);\n\nexport default PointerHeight;","import { createSelector } from 'reselect';\nimport task from './task';\nimport selectedPixels from './selectedPixels';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nconst selector = {\n    [Task.Task1]: (selected: SelectedPixels) => {\n        switch(selected.size) {\n            case 0: return 'Select line edges';\n            case 1: return 'Selected 1/2 points';\n            default: return 'Line edges selected';\n        }\n    },\n    [Task.Task2]: (selected: SelectedPixels) => {\n        switch(selected.size) {\n            case 0: return 'Select circle center';\n            case 1: return 'Select circle end point';\n            default: return 'Circle center and radius selected';\n        }\n    },\n    [Task.Task3]: (selected: SelectedPixels) => {\n        switch(selected.size) {\n            case 0: return 'Select line edges';\n            case 1: return 'Selected 1/2 line edges';\n            case 2: return 'Select rectangle edges';\n            case 3: return 'Selected 1/2 rectangle edges';\n            default: return 'All input has been entered';\n        }\n    }\n};\n\nconst taskState = createSelector(\n    task,\n    selectedPixels,\n    (currentTask, selected) => selector[currentTask](selected)\n);\n\nexport default taskState;","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport taskState from '../../store/selectors/taskState';\nimport disableConfig from '../../store/selectors/disableConfig';\n\ninterface Props {\n    feedback: string,\n    disable: boolean\n};\n\nconst Feedback: React.FC<Props> = ({ feedback, disable }) => {\n    return (\n        <Chip variant=\"outlined\" color={disable ? \"default\" : \"primary\"} label={feedback} />\n    );\n};\n\nconst TaskFeedback = connect(\n    (state: State) => ({ feedback: taskState(state), disable: disableConfig(state) }),\n)(Feedback);\n\nexport default TaskFeedback;","import { createSelector } from 'reselect';\nimport task from './task';\nimport selectedPixels from './selectedPixels';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nfunction canDrawTask1or2(selected: SelectedPixels): boolean {\n    return selected.size === 2;\n}\n\nfunction canDrawTask3(selected: SelectedPixels): boolean {\n    return selected.size === 4;\n}\n\nconst selector = {\n    [Task.Task1]: canDrawTask1or2,\n    [Task.Task2]: canDrawTask1or2,\n    [Task.Task3]: canDrawTask3\n};\n\nconst canDraw = createSelector(\n    task,\n    selectedPixels,\n    (currentTask, selected) => selector[currentTask](selected)\n);\n\nexport default canDraw;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport canDraw from '../../store/selectors/canDraw';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport draw from '../../store/actions/Draw';\n\ninterface Props {\n    canDraw: boolean,\n    disabled: boolean,\n    draw: () => void\n};\n\nconst DrawButton: React.FC<Props> = ({ canDraw, draw, disabled }) => {\n    return (\n        <Button variant=\"contained\" color=\"primary\" disabled={!canDraw || disabled} onClick={draw}>\n            Draw\n        </Button>\n    );\n};\n\nconst Connected = connect(\n    (state: State) => ({ canDraw: canDraw(state), disabled: disableConfig(state) }),\n    { draw }\n)(DrawButton);\n\nexport default Connected;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport clearRasterDisplay from '../../store/actions/ClearRasterDisplay';\n\ninterface Props {\n    disabled: boolean,\n    clear: () => void\n};\n\nconst ClearButton: React.FC<Props> = ({ disabled, clear }) => {\n    return (\n        <Button variant=\"outlined\" color=\"secondary\" disabled={disabled} onClick={clear}>\n            Clear\n        </Button>\n    );\n};\n\nconst Connected = connect(\n    (state: State) => ({ disabled: disableConfig(state) }),\n    { clear: clearRasterDisplay }\n)(ClearButton);\n\nexport default Connected;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Task from './Task';\nimport TaskEnum from '../../types/Task';\nimport ChangeConfig from './ChangeConfig';\nimport Delay from './Delay';\nimport DashLength from './DashLength';\nimport PointerWidth from './PointerWidth';\nimport PointerHeight from './PointerHeight';\nimport TaskFeedback from './TaskFeedback';\nimport DrawButton from './DrawButton';\nimport ClearButton from './ClearButton';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport task from '../../store/selectors/task';\n\ninterface Props {\n    task: TaskEnum\n}\n\nconst TaskConfig: React.FC<Props> = ({task}) => (\n    <Grid container direction='row' justify='space-evenly' alignItems='center'>\n        <Grid item><ChangeConfig configRaster={false}/></Grid>\n        <Grid item><Task/></Grid>\n        <Grid item><Delay/></Grid>\n        {task === TaskEnum.Task1 ? <Grid item><DashLength/></Grid> : null}\n        {task === TaskEnum.Task2 ? <Grid item><PointerHeight/></Grid> : null}\n        {task === TaskEnum.Task2 ? <Grid item><PointerWidth/></Grid> : null}\n        <Grid item><TaskFeedback /></Grid>\n        <Grid item><DrawButton /></Grid>\n        <Grid item><ClearButton /></Grid>\n    </Grid>\n);\n\nconst Connected = connect(\n    (state: State) => ({ task: task(state) }),\n)(TaskConfig);\n\nexport default Connected;","import React from 'react';\nimport MuiToolbar from '@material-ui/core/Toolbar';\nimport RasterConfig from './../RasterConfig';\nimport TaskConfig from './TaskConfig';\nimport { State } from '../../store/reducers/main';\nimport { connect } from 'react-redux';\n\ninterface Props {\n    configRaster: boolean;\n};\n\nconst Toolbar: React.FC<Props> = ({configRaster}) => (\n    <MuiToolbar>\n        {configRaster ? <RasterConfig /> : <TaskConfig />}\n    </MuiToolbar>\n);\n\nconst Connected = connect(\n    ({ configRaster }: State) => ({ configRaster })\n)(Toolbar);\n\nexport default Connected;","import React from 'react';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport Toolbar from './connected/Toolbar';\n\nconst AppBar: React.FC = () => (\n    <MuiAppBar position='static' color='default'>\n        <Toolbar />\n    </MuiAppBar>\n);\n\nexport default AppBar;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configure';\nimport RasterDisplay from './components/connected/Display';\nimport AppBar from './components/AppBar';\n\nconst baseTheme = createMuiTheme();\n\nconst appTheme = createMuiTheme({\n    ...baseTheme,\n    typography: {\n        fontSize: 24\n    }\n});\n\nconst store = configureStore();\n\nconst App: React.FC = () => (\n    <ThemeProvider theme={appTheme}>\n        <CssBaseline />\n        <div style={{width: '100%', height: '100%'}}>\n            <Provider store={store}>\n                <AppBar />\n                <RasterDisplay />\n            </Provider>\n        </div> \n    </ThemeProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}