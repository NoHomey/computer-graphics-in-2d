{"version":3,"sources":["store/actions/SetTask.ts","types/Task.ts","store/reducers/task.ts","types/PixelKind.ts","types/Color.ts","store/actions/SetPixelColor.ts","store/reducers/pixelColor.ts","store/actions/SetRasterDisplayRows.ts","store/actions/SetRasterDisplayCols.ts","store/actions/AddPixelToSelected.ts","store/actions/RemovePixelFromSelected.ts","store/actions/SetKindToPixel.ts","store/actions/ClearRasterDisplay.ts","utility/raster.ts","store/reducers/rasterDisplay.ts","store/actions/Resize.ts","store/reducers/screenSize.ts","store/reducers/rasterConfig.ts","store/actions/ChangeConfig.ts","store/reducers/configRaster.ts","store/actions/SetDelay.ts","store/reducers/delay.ts","store/actions/SetDashLength.ts","store/reducers/dashLength.ts","store/actions/EnableConfig.ts","types/SelectedPixels.ts","store/reducers/selectedPixels.ts","store/actions/DisableConfig.ts","store/reducers/config.ts","store/actions/SetPointerWidth.ts","store/reducers/pointerWidth.ts","store/actions/SetPointerHeight.ts","store/reducers/pointerHeight.ts","store/reducers/main.ts","store/actions/SelectPixel.ts","store/selectors/selectedPixels.ts","store/sagas/selectPixel.ts","store/actions/Draw.ts","store/selectors/delay.ts","store/selectors/dashLength.ts","store/selectors/task.ts","store/selectors/pointerWidth.ts","store/selectors/pointerHeight.ts","store/sagas/draw.ts","store/sagas/root.ts","store/configure.ts","components/RasterDisplay.tsx","utility/pixelStyle.ts","utility/pixelMap.ts","store/selectors/pixelWidth.ts","store/selectors/pixelHeight.ts","store/selectors/pixelMap.ts","components/connected/Display.ts","utility/colors.ts","components/ColorPicker.tsx","components/connected/BackgroudColor.ts","components/connected/FillColor.ts","components/connected/ContourColor.ts","components/PixelCount.tsx","components/connected/RowsCount.ts","components/connected/ColsCount.ts","store/selectors/disableConfig.ts","components/connected/ChangeConfig.tsx","components/RasterConfig.tsx","components/connected/Task.tsx","components/connected/Delay.tsx","components/connected/DashLength.tsx","components/PointerDimention.tsx","components/connected/PointerWidth.ts","components/connected/PointerHeight.ts","store/selectors/taskState.ts","components/connected/TaskFeedback.tsx","store/selectors/canDraw.ts","components/connected/DrawButton.tsx","components/connected/ClearButton.tsx","components/connected/TaskConfig.tsx","components/connected/Toolbar.tsx","components/AppBar.tsx","App.tsx","index.tsx"],"names":["SetTask","setTask","task","type","payload","Task","defaultTask","Task1","PixelKind","state","action","Color","SetPixelColor","setPixelColor","pixel","color","pixelKind","setBackgroundColor","Background","setFillColor","Fill","setContourColor","Contour","defaultColorMap","Green","Blue","Red","pixelColor","colorMap","SetRasterDisplayRows","setRasterDisplayRows","rows","SetRasterDisplayCols","setRasterDisplayCols","cols","AddPixelToSelected","addPixelToSelected","RemovePixelFromSelected","removePixelFromSelected","SetKindToPixel","setKindToPixel","ClearRasterDisplay","clearRasterDisplay","raster","List","Array","fill","map","_","defaultState","display","x","y","setIn","rasterDisplay","Resize","resize","size","defaultScreenSize","window","width","innerWidth","height","innerHeight","screenSize","reducerMap","reducer","combineReducers","ChangeConfig","changeConfig","configRaster","SetDelay","setDelay","delay","SetDashLength","setDashLength","dashLength","EnableConfig","enableConfig","empty","Set","entry","has","selected","selectedPixels","DisableConfig","disableConfig","config","SetPointerWidth","setPointerWidth","pointerWidth","SetPointerHeight","setPointerHeight","pointerHeight","rasterConfig","add","delete","SelectPixel","selectPixel","handleSelectPixelAction","select","selectedPixelsSelector","put","takeEvery","Draw","draw","handleDrawAction","drawTask1","drawTask2","delaySelector","delayMS","taskSelector","entries","toArray","x1","get","y1","x2","y2","call","dashLengthSelector","dx","Math","abs","dy","reverse","tmp","incUP","incDN","incX","incY","d","dashCounter","skip","i","pointerWidthSelector","pointerHeightSelector","point","circlePixelDrawer","xc","yc","xr","yr","r","floor","sqrt","drawPoint","j","root","all","configure","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","addEventListener","dispatch","run","rootSaga","RasterDisplay","pixelMap","Grid","container","direction","justify","row","rowIndex","item","key","colIndex","style","onClick","pixelStyle","backgroundColor","minWidth","minHeight","border","pixelWidth","createSelector","pixelHeight","createPixelMap","Display","connect","colors","Crimson","DarkCyan","DarkGreen","DarkOrange","DodgerBlue","Gold","LawnGreen","LightSeaGreen","MediumBlue","Orange","Purple","SteelBlue","Indigo","FireBrick","DarkMagenta","useStyles","makeStyles","props","ColorPicker","handler","classes","labelId","label","FormControl","InputLabel","id","Select","value","onChange","event","newColor","target","filter","c","removeColor1","removeColor2","index","MenuItem","BackgroundColor","FillColor","ContourColor","counts","generateCounts","count","PixelCount","val","newVal","RowsCount","ColsCount","Connected","disabled","Button","variant","RasterConfig","alignItems","onTaskChange","newTask","Task2","options","onDelayChange","newDelay","length","newDashLength","PointerDimention","PointerWidth","PointerHeight","selector","taskState","currentTask","TaskFeedback","feedback","disable","Chip","canDrawTask1or2","canDraw","clear","Delay","TaskEnum","DashLength","AppBar","position","baseTheme","createMuiTheme","appTheme","typography","fontSize","configureStore","App","ThemeProvider","theme","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5de7b5b4.chunk.js","sourcesContent":["import Task from '../../types/Task';\n\nexport const SetTask = 'set-task';\n\nexport interface SetTaskAction {\n    type: typeof SetTask,\n    payload: {\n        task: Task\n    }\n};\n\nexport function setTask(task: Task): SetTaskAction {\n    return {\n        type: SetTask,\n        payload: { task }\n    };\n};\n\nexport default setTask;","enum Task {\n    Task1,\n    Task2\n};\n\nexport default Task;","import { SetTask, SetTaskAction } from '../actions/SetTask';\nimport Action from './Action';\nimport Task from '../../types/Task';\n\nconst defaultTask: Task = Task.Task1;\n\nfunction task(\n    state: Task = defaultTask,\n    action: Action | SetTaskAction\n): Task {\n    switch(action.type) {\n        case SetTask:\n            return (action as SetTaskAction).payload.task;\n        default: return state;\n    }\n}\n\nexport default task;","enum PixelKind {\n    Background = 0,\n    Fill = 1,\n    Contour = 2\n};\n\nexport default PixelKind;","enum Color {\n    Blue = 'Blue',\n    Crimson = 'Crimson',\n    DarkCyan = 'DarkCyan',\n    DarkGreen = 'DarkGreen',\n    DarkOrange = 'DarkOrange',\n    DodgerBlue = 'DarkBlue',\n    Gold = 'Gold',\n    Green = 'Green',\n    LawnGreen = 'LawnGreen',\n    LightSeaGreen = 'LightSeaGreen',\n    MediumBlue = 'MediumBlue',\n    Orange = 'Orange',\n    Red = 'Red',\n    Purple = 'Purple',\n    SteelBlue = 'SteelBlue',\n    Indigo = 'Indigo',\n    FireBrick = 'FireBrick',\n    DarkMagenta = 'DarkMagenta'\n};\n\nexport default Color;","import PixelKind from '../../types/PixelKind';\nimport Color from '../../types/Color';\n\nexport const SetPixelColor = 'set-pixel-color';\n\nexport interface SetPixelColorAction {\n    type: typeof SetPixelColor,\n    payload: {\n        pixelKind: PixelKind,\n        color: Color\n    }\n};\n\nconst setPixelColor: (pixelKind: PixelKind) => (color: Color) => SetPixelColorAction\n= pixel => color => ({\n    type: SetPixelColor,\n    payload: { pixelKind: pixel, color }\n});\n\nexport const setBackgroundColor = setPixelColor(PixelKind.Background);\n\nexport const setFillColor = setPixelColor(PixelKind.Fill);\n\nexport const setContourColor = setPixelColor(PixelKind.Contour);","import { SetPixelColor, SetPixelColorAction } from '../actions/SetPixelColor';\nimport Action from './Action';\nimport ColorMap from '../../types/ColorMap';\nimport PixelKind from '../../types/PixelKind';\nimport Color from '../../types/Color';\n\nconst defaultColorMap: ColorMap = {\n    [PixelKind.Background]: Color.Green,\n    [PixelKind.Fill]: Color.Blue,\n    [PixelKind.Contour]: Color.Red\n}\n\nfunction pixelColor(\n    state: ColorMap = defaultColorMap,\n    action: Action | SetPixelColorAction\n): ColorMap {\n    switch(action.type) {\n        case SetPixelColor:\n            return setColor(state, (action as SetPixelColorAction).payload);\n        default: return state\n    }\n}\n\nexport default pixelColor;\n\nfunction setColor(colorMap: ColorMap, payload: SetPixelColorAction['payload']): ColorMap {\n    return { ...colorMap, [payload.pixelKind] : payload.color };\n}","export const SetRasterDisplayRows = 'set-raster-display-rows';\n\nexport interface SetRasterDisplayRowsAction {\n    type: typeof SetRasterDisplayRows,\n    payload: {\n        rows: number\n    }\n};\n\nexport function setRasterDisplayRows(rows: number): SetRasterDisplayRowsAction {\n    return {\n        type: SetRasterDisplayRows,\n        payload: { rows }\n    };\n}\n\nexport default setRasterDisplayRows;","export const SetRasterDisplayCols = 'set-raster-display-cols';\n\nexport interface SetRasterDisplayColsAction {\n    type: typeof SetRasterDisplayCols,\n    payload: {\n        cols: number\n    }\n};\n\nexport function setRasterDisplayCols(cols: number): SetRasterDisplayColsAction {\n    return {\n        type: SetRasterDisplayCols,\n        payload: { cols }\n    };\n}\n\nexport default setRasterDisplayCols;","import Pixel from '../../types/Pixel';\n\nexport const AddPixelToSelected = 'add-pixel-to-selected';\n\nexport interface AddPixelToSelectedAction {\n    type: typeof AddPixelToSelected,\n    payload: Pixel\n};\n\nexport function addPixelToSelected(pixel: Pixel): AddPixelToSelectedAction {\n    return {\n        type: AddPixelToSelected,\n        payload: pixel\n    };\n};\n\nexport default addPixelToSelected;","import Pixel from '../../types/Pixel';\n\nexport const RemovePixelFromSelected = 'remove-pixel-from-selected';\n\nexport interface RemovePixelFromSelectedAction {\n    type: typeof RemovePixelFromSelected,\n    payload: Pixel\n};\n\nexport function removePixelFromSelected(pixel: Pixel): RemovePixelFromSelectedAction {\n    return {\n        type: RemovePixelFromSelected,\n        payload: pixel\n    };\n};\n\nexport default removePixelFromSelected;","import Pixel from \"../../types/Pixel\";\nimport PixelKind from \"../../types/PixelKind\";\n\nexport const SetKindToPixel = 'set-kind-to-pixel';\n\nexport interface SetKindToPixelAction {\n    type: typeof SetKindToPixel,\n    payload: {\n        pixel: Pixel,\n        pixelKind: PixelKind\n    } \n}\n\nexport function setKindToPixel(pixel: Pixel, pixelKind: PixelKind): SetKindToPixelAction {\n    return {\n        type: SetKindToPixel,\n        payload: {\n            pixel,\n            pixelKind\n        }\n    };\n};\n\nexport default setKindToPixel;","export const ClearRasterDisplay = 'clear-raster-display';\n\nexport interface ClearRasterDisplayAction {\n    type: typeof ClearRasterDisplay,\n};\n\nexport function clearRasterDisplay(): ClearRasterDisplayAction {\n    return { type: ClearRasterDisplay };\n};\n\nexport default clearRasterDisplay;","import Raster from '../types/Raster';\nimport PixelKind from '../types/PixelKind';\nimport { List } from 'immutable';\n\nfunction raster(rows: number, cols: number): Raster {\n    return List(\n        Array(rows).fill(PixelKind.Background).map(_ =>\n            List(Array(cols).fill(PixelKind.Background))\n        )\n    );\n}\n\nexport default raster;","import {\n    SetRasterDisplayRows,\n    SetRasterDisplayRowsAction\n} from '../actions/SetRasterDisplayRows';\nimport {\n    SetRasterDisplayCols,\n    SetRasterDisplayColsAction\n} from '../actions/SetRasterDisplayCols';\nimport {\n    AddPixelToSelected,\n    AddPixelToSelectedAction\n} from '../actions/AddPixelToSelected';\nimport {\n    RemovePixelFromSelected,\n    RemovePixelFromSelectedAction\n} from '../actions/RemovePixelFromSelected';\nimport { SetKindToPixel, SetKindToPixelAction } from '../actions/SetKindToPixel';\nimport { SetTask } from '../actions/SetTask';\nimport { ClearRasterDisplay } from '../actions/ClearRasterDisplay';\nimport Action from './Action';\nimport Raster from '../../types/Raster';\nimport raster from '../../utility/raster';\nimport Pixel from '../../types/Pixel';\nimport PixelKind from '../../types/PixelKind';\n\ninterface State {\n    rows: number,\n    cols: number,\n    display: Raster\n}\n\nconst defaultRasterDisplayRows = 16;\n\nconst defaultRasterDisplayCols = 32;\n\nconst defaultRasterDisplay = raster(defaultRasterDisplayRows, defaultRasterDisplayCols);\n\nconst defaultState: State = {\n    rows: defaultRasterDisplayRows,\n    cols: defaultRasterDisplayCols,\n    display: defaultRasterDisplay\n};\n\nfunction rasterDisplay(\n    state: State = defaultState,\n    action: Action | SetRasterDisplayRowsAction | SetRasterDisplayColsAction\n): State {\n    switch(action.type) {\n        case SetRasterDisplayRows: {\n            const { cols } = state;\n            const { rows } = (action as SetRasterDisplayRowsAction).payload;\n            return display({ rows, cols });\n        }\n        case SetRasterDisplayCols: {\n            const { rows } = state;\n            const { cols } = (action as SetRasterDisplayColsAction).payload;\n            return display({ rows, cols });\n        }\n        case SetKindToPixel: {\n            const { rows, cols } = state;\n            const { pixel, pixelKind } = (action as SetKindToPixelAction).payload;\n            if(pixel.x < 0 || pixel.x >= cols || pixel.y < 0 || pixel.y >= rows) {\n                return state;\n            }\n            return setKindToPixel(state, pixel, pixelKind);\n        }\n        case AddPixelToSelected: {\n            const pixel = (action as AddPixelToSelectedAction).payload;\n            return setKindToPixel(state, pixel, PixelKind.Contour);\n        }\n        case RemovePixelFromSelected: {\n            const pixel = (action as RemovePixelFromSelectedAction).payload;\n            return setKindToPixel(state, pixel, PixelKind.Background);\n        }\n        case SetTask: {\n            const { rows, cols } = state;\n            return display({ rows, cols });\n        }\n        case ClearRasterDisplay: {\n            const { rows, cols } = state;\n            return display({ rows, cols });\n        }\n        default: return state;\n    }\n}\n\nfunction display({ rows, cols }: { rows: number, cols: number }): State {\n    return {\n        rows,\n        cols,\n        display: raster(rows, cols)\n    };\n}\n\nfunction setKindToPixel(state: State, { x, y }: Pixel, pixelKind: PixelKind): State {\n    return {\n        ...state,\n        display: state.display.setIn([y, x], pixelKind)\n    };\n}\n\nexport default rasterDisplay;","import ScreenSize from '../../types/ScreenSize';\n\nexport const Resize = 'resize';\n\nexport interface ResizeAction {\n    type: typeof Resize,\n    payload: ScreenSize\n};\n\nexport function resize(size: ScreenSize): ResizeAction {\n    return { type: Resize, payload: size };\n};\n\nexport default resize;","import { Resize, ResizeAction } from '../actions/Resize';\nimport Action from './Action';\nimport ScreenSize from '../../types/ScreenSize';\n\nconst defaultScreenSize: ScreenSize =\ntypeof window === 'object'\n? {\n    width: window.innerWidth,\n    height: window.innerHeight\n} : {\n    width: 1080,\n    height: 720\n};\n\nfunction screenSize(\n    state: ScreenSize = defaultScreenSize,\n    action: Action | ResizeAction\n): ScreenSize {\n    switch(action.type) {\n        case Resize:\n            return (action as ResizeAction).payload;\n        default: return state\n    }\n}\n\nexport default screenSize;","import { combineReducers } from 'redux';\nimport pixelColor from './pixelColor';\nimport rasterDisplay from './rasterDisplay';\nimport screenSize from './screenSize';\n\nconst reducerMap = {\n    pixelColor,\n    rasterDisplay,\n    screenSize\n};\n\nexport const reducer = combineReducers(reducerMap);\n\nexport type State = ReturnType<typeof reducer>;\n\nexport default reducer;","export const ChangeConfig = 'chage-config';\n\nexport interface ChangeConfigAction {\n    type: typeof ChangeConfig,\n    payload: { }\n}\n\nexport function changeConfig(): ChangeConfigAction {\n    return {\n        type: ChangeConfig,\n        payload: { }\n    };\n};\n\nexport default changeConfig;","import { ChangeConfig, ChangeConfigAction } from '../actions/ChangeConfig';\nimport Action from './Action';\n\nfunction configRaster(\n    state: boolean = true,\n    action: Action | ChangeConfigAction\n): boolean {\n    switch(action.type) {\n        case ChangeConfig: return !state;\n        default: return state;\n    }\n}\n\nexport default configRaster;","export const SetDelay = 'set-delay';\n\nexport interface SetDelayAction {\n    type: typeof SetDelay,\n    payload: { delay: number }\n};\n\nexport function setDelay(delay: number): SetDelayAction {\n    return {\n        type: SetDelay,\n        payload: { delay }\n    };\n};\n\nexport default setDelay;","import { SetDelay, SetDelayAction } from '../actions/SetDelay';\nimport Action from './Action';\n\nfunction delay(state: number = 300, action: Action | SetDelayAction): number {\n    switch(action.type) {\n        case SetDelay:\n            return (action as SetDelayAction).payload.delay;\n        default: return state;\n    }\n}\n\nexport default delay;","export const SetDashLength = 'set-dash-length';\n\nexport interface SetDashLengthAction {\n    type: typeof SetDashLength,\n    payload: { dashLength: number }\n};\n\nexport function setDashLength(dashLength: number): SetDashLengthAction {\n    return {\n        type: SetDashLength,\n        payload: { dashLength }\n    };\n};\n\nexport default setDashLength;","import { SetDashLength, SetDashLengthAction } from '../actions/SetDashLength';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetDashLengthAction): number {\n    switch(action.type) {\n        case SetDashLength:\n            return (action as SetDashLengthAction).payload.dashLength;\n        default: return state;\n    }\n}\n\nexport default dashLength;","export const EnableConfig = 'enable-config';\n\nexport interface EnableConfigAction {\n    type: typeof EnableConfig\n};\n\nexport function enableConfig(): EnableConfigAction {\n    return { type: EnableConfig };\n};\n\nexport default enableConfig;","import { List, Set } from 'immutable';\nimport Pixel from './Pixel';\n\ntype SelectedPixels = Set<List<number>>;\n\nexport const empty = Set<List<number>>();\n\nexport function entry({ x, y } : Pixel): List<number> {\n    return List([ x, y ]);\n};\n\nexport function has(selected: SelectedPixels, pixel: Pixel): boolean {\n    return selected.has(entry(pixel));\n};\n\nexport default SelectedPixels;","import {\n    AddPixelToSelected,\n    AddPixelToSelectedAction\n} from '../actions/AddPixelToSelected';\nimport {\n    RemovePixelFromSelected,\n    RemovePixelFromSelectedAction\n} from '../actions/RemovePixelFromSelected';\nimport { SetTask } from '../actions/SetTask';\nimport { EnableConfig } from '../actions/EnableConfig';\nimport Action from './Action';\nimport SelectedPixels, { empty, entry } from '../../types/SelectedPixels';\n\nfunction selectedPixels(\n    state: SelectedPixels = empty,\n    action: Action | AddPixelToSelectedAction | RemovePixelFromSelectedAction\n): SelectedPixels {\n    switch(action.type) {\n        case AddPixelToSelected: {\n            const pixel = (action as AddPixelToSelectedAction).payload;\n            return state.add(entry(pixel));\n        }\n        case RemovePixelFromSelected: {\n            const pixel = (action as RemovePixelFromSelectedAction).payload;\n            return state.delete(entry(pixel));\n        }\n        case SetTask: return empty;\n        case EnableConfig: return empty;\n        default: return state;\n    }\n}\n\nexport default selectedPixels;","export const DisableConfig = 'disable-config';\n\nexport interface DisableConfigAction {\n    type: typeof DisableConfig\n};\n\nexport function disableConfig(): DisableConfigAction {\n    return { type: DisableConfig };\n};\n\nexport default disableConfig;","import { EnableConfig, EnableConfigAction } from '../actions/EnableConfig';\nimport { DisableConfig, DisableConfigAction } from '../actions/DisableConfig';\nimport Action from './Action';\n\nfunction config(\n    state: boolean = true,\n    action: Action | EnableConfigAction | DisableConfigAction\n): boolean {\n    switch(action.type) {\n        case EnableConfig: return true;\n        case DisableConfig: return false;\n        default: return state;\n    }\n}\n\nexport default config;","export const SetPointerWidth = 'set-pointer-width';\n\nexport interface SetPointerWidthAction {\n    type: typeof SetPointerWidth,\n    payload: { pointerWidth: number }\n};\n\nexport function setPointerWidth(pointerWidth: number): SetPointerWidthAction {\n    return {\n        type: SetPointerWidth,\n        payload: { pointerWidth }\n    };\n};\n\nexport default setPointerWidth;","import { SetPointerWidth, SetPointerWidthAction } from '../actions/SetPointerWidth';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetPointerWidthAction): number {\n    switch(action.type) {\n        case SetPointerWidth:\n            return (action as SetPointerWidthAction).payload.pointerWidth;\n        default: return state;\n    }\n}\n\nexport default dashLength;","export const SetPointerHeight = 'set-pointer-height';\n\nexport interface SetPointerHeightAction {\n    type: typeof SetPointerHeight,\n    payload: { pointerHeight: number }\n};\n\nexport function setPointerHeight(pointerHeight: number): SetPointerHeightAction {\n    return {\n        type: SetPointerHeight,\n        payload: { pointerHeight }\n    };\n};\n\nexport default setPointerHeight;","import { SetPointerHeight, SetPointerHeightAction } from '../actions/SetPointerHeight';\nimport Action from './Action';\n\nfunction dashLength(state: number = 1, action: Action | SetPointerHeightAction): number {\n    switch(action.type) {\n        case SetPointerHeight:\n            return (action as SetPointerHeightAction).payload.pointerHeight;\n        default: return state;\n    }\n}\n\nexport default dashLength;","import { combineReducers } from 'redux';\nimport task from './task';\nimport rasterConfig from './rasterConfig';\nimport configRaster from './configRaster';\nimport delay from './delay';\nimport dashLength from './dashLength';\nimport selectedPixels from './selectedPixels';\nimport config from './config';\nimport pointerWidth from './pointerWidth';\nimport pointerHeight from './pointerHeight';\n\nconst reducerMap = {\n    task,\n    rasterConfig,\n    configRaster: configRaster,\n    delay,\n    dashLength,\n    selectedPixels,\n    config,\n    pointerWidth,\n    pointerHeight\n};\n\nexport const reducer = combineReducers(reducerMap);\n\nexport type State = ReturnType<typeof reducer>;\n\nexport default reducer;","import Pixel from '../../types/Pixel';\n\nexport const SelectPixel = 'select-pixel';\n\nexport interface SelectPixelAction {\n    type: typeof SelectPixel,\n    payload: Pixel\n}\n\nexport function selectPixel(pixel: Pixel): SelectPixelAction {\n    return { type: SelectPixel, payload: pixel };\n}\n\nexport default selectPixel;","import { State } from '../reducers/main';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nfunction selectedPixels(state: State): SelectedPixels {\n    return state.selectedPixels;\n}\n\nexport default selectedPixels;","import { takeEvery, select, put } from 'redux-saga/effects'\nimport { SelectPixel, SelectPixelAction } from '../actions/SelectPixel';\nimport selectedPixelsSelector from '../selectors/selectedPixels';\nimport SelectedPixels, { has } from '../../types/SelectedPixels';\nimport addPixelToSelected from '../actions/AddPixelToSelected';\nimport removePixelFromSelected from '../actions/RemovePixelFromSelected';\n\nfunction* handleSelectPixelAction({ payload }: SelectPixelAction) {\n    const pixel = payload;\n    const selectedPixels: SelectedPixels = yield select(selectedPixelsSelector);\n    const isSelected = has(selectedPixels, pixel);\n    if(isSelected) {\n        return yield put(removePixelFromSelected(pixel));\n    } else if(selectedPixels.size < 2) {\n        return yield put(addPixelToSelected(pixel));\n    }\n}\n\nfunction* selectPixel() {\n    yield takeEvery(SelectPixel, handleSelectPixelAction);\n}\n\nexport default selectPixel;","export const Draw = 'draw';\n\nexport interface DrawAction {\n    type: typeof Draw\n}\n\nexport function draw(): DrawAction {\n    return { type: Draw };\n};\n\nexport default draw;","import { State } from '../reducers/main';\n\nfunction delay(state: State): number {\n    return state.delay;\n}\n\nexport default delay;","import { State } from '../reducers/main';\n\nfunction dashLength(state: State): number {\n    return state.dashLength;\n}\n\nexport default dashLength;","import { State } from '../reducers/main';\nimport Task from '../../types/Task';\n\nfunction task(state: State): Task {\n    return state.task;\n}\n\nexport default task;","import { State } from '../reducers/main';\n\nfunction pointerWidth(state: State): number {\n    return state.pointerWidth;\n}\n\nexport default pointerWidth;","import { State } from '../reducers/main';\n\nfunction pointerHeight(state: State): number {\n    return state.pointerHeight;\n}\n\nexport default pointerHeight;","import { takeEvery, select, put, delay, call } from 'redux-saga/effects'\nimport { Draw } from '../actions/Draw';\nimport PixelKind from '../../types/PixelKind';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\nimport setKindToPixel from '../actions/SetKindToPixel';\nimport disableConfig from '../actions/DisableConfig';\nimport enableConfig from '../actions/EnableConfig';\nimport selectedPixelsSelector from '../selectors/selectedPixels';\nimport delaySelector from '../selectors/delay';\nimport dashLengthSelector from '../selectors/dashLength';\nimport taskSelector from '../selectors/task';\nimport pointerWidthSelector from '../selectors/pointerWidth';\nimport pointerHeightSelector from '../selectors/pointerHeight';\n\nfunction* handleDrawAction() {\n    const selected: SelectedPixels = yield select(selectedPixelsSelector);\n    const delayMS: number = yield select(delaySelector);\n    const task: Task = yield select(taskSelector);\n    const entries = selected.toArray();\n    let x1 = entries[0].get(0) as number;\n    let y1 = entries[0].get(1) as number;\n    let x2 = entries[1].get(0) as number;\n    let y2 = entries[1].get(1) as number;\n    yield put(disableConfig());\n    yield call(task === Task.Task1 ? drawTask1 : drawTask2, delayMS, x1, y1, x2, y2);\n    yield put(enableConfig());\n}\n\nfunction* draw() {\n    yield takeEvery(Draw, handleDrawAction);\n}\n\nexport default draw;\n\nfunction* drawTask1(delayMS: number, x1: number, y1: number, x2: number, y2: number) {\n    const dashLength: number = yield select(dashLengthSelector);\n    yield put(setKindToPixel({ x: x1, y: y1 }, PixelKind.Background));\n    yield delay(delayMS);\n    yield put(setKindToPixel({ x: x2, y: y2 }, PixelKind.Background));\n    let dx = Math.abs(x2 - x1);\n    let dy = Math.abs(y2 - y1);\n    const reverse = dx < dy;\n    if(reverse) {\n        let tmp = x1;\n        x1 = y1;\n        y1 = tmp;\n        tmp = x2;\n        x2 = y2;\n        y2 = tmp;\n        tmp = dx;\n        dx = dy;\n        dy = tmp;\n    }\n    const incUP = (-2) * dx + 2 * dy;\n    const incDN = 2 * dy;\n    const incX = x1 <= x2 ? 1 : -1;\n    const incY = y1 <= y2 ? 1 : -1;\n    let d = -dx + 2 * dy;\n    let x = x1;\n    let y = y1;\n    let dashCounter = 0;\n    let skip = false;\n    for(let i = 0; i <= dx; ++i) {\n        if(!skip) {\n            yield delay(delayMS);\n            if(reverse) {\n                yield put(setKindToPixel({ x: y, y: x }, PixelKind.Contour));\n            } else {\n                yield put(setKindToPixel({ x, y }, PixelKind.Contour));\n            }\n        }\n        ++dashCounter;\n        if(dashCounter === dashLength) {\n            skip = !skip;\n            dashCounter = 0;        \n        }\n        x += incX;\n        if(d > 0) {\n            d += incUP;\n            y += incY;\n        } else {\n            d += incDN;\n        }\n    }\n}\n\nfunction* drawTask2(delayMS: number, x1: number, y1: number, x2: number, y2: number) {\n    const pointerWidth = yield select(pointerWidthSelector);\n    const pointerHeight = yield select(pointerHeightSelector);\n    const point = circlePixelDrawer(pointerWidth, pointerHeight);\n    yield put(setKindToPixel({ x: x1, y: y1 }, PixelKind.Background));\n    yield delay(delayMS);\n    yield put(setKindToPixel({ x: x2, y: y2 }, PixelKind.Background));\n    yield delay(delayMS);\n    const xc = x1;\n    const yc = y1;\n    const xr = x2 - x1;\n    const yr = y2 - y1;\n    const r = Math.floor(Math.sqrt((xr * xr) + (yr * yr)) + 0.5);\n    let x = 0;\n    let y = r;\n    let d = 2 - 2 * r;\n    yield point(xc, yc + r);\n    yield delay(delayMS);\n    yield point(xc, yc - r);\n    yield delay(delayMS);\n    yield point(xc + r, yc);\n    yield delay(delayMS);\n    yield point(xc - r, yc);\n    while(true) {\n        if(d > - y) {\n            --y;\n            d += 1 - 2 * y;\n        }\n        if(d <= x) {\n            ++x;\n            d += 1 + 2 * x;\n        }\n        if(y < 0) {\n            return;\n        }\n        yield delay(delayMS);\n        yield point(xc + x, yc + y);\n        yield delay(delayMS);\n        yield point(xc + x, yc - y);\n        yield delay(delayMS);\n        yield point(xc - x, yc + y);\n        yield delay(delayMS);\n        yield point(xc - x, yc - y);\n    }\n}\n\nfunction circlePixelDrawer(width: number, height: number) {\n    const xc = Math.floor(width / 2);\n    const yc = Math.floor(height / 2);\n    return function* drawPoint(x: number, y: number) {\n        for(let i = 0; i < width; ++i) {\n            for(let j = 0; j < height; ++j) {\n                yield put(setKindToPixel({ x: x - xc + i, y: y - yc + j }, PixelKind.Contour));\n            }\n        }\n    }\n}","import { all } from 'redux-saga/effects';\nimport selectPixel from './selectPixel';\nimport draw from './draw';\n\nfunction* root() {\n    yield all([selectPixel(), draw()]);\n}\n\nexport default root;","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducers/main';\nimport ScreenSize from '../types/ScreenSize';\nimport resize from './actions/Resize';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/root';\n\nfunction configure() {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n    if(typeof window === 'object') {\n        window.addEventListener('resize', () => {\n            const size: ScreenSize = {\n                width: window.innerWidth,\n                height: window.innerHeight\n            };\n            store.dispatch(resize(size));\n        });\n    }\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n}\n\nexport default configure;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Raster from '../types/Raster';\nimport PixelMap from '../types/PixelMap';\nimport Action from '../store/reducers/Action';\nimport selectPixel from '../store/actions/SelectPixel';\n\ninterface Props {\n    raster: Raster,\n    pixelMap: PixelMap,\n    dispatch: (action: Action) => void\n};\n\nconst RasterDisplay: React.FC<Props> = ({raster, pixelMap, dispatch}) => (\n    <Grid container direction='column' justify='center'>\n    {\n        raster.map((row, rowIndex) => (\n            <Grid item container direction='row' justify='center' key={rowIndex}>\n            {\n                row.map((pixel, colIndex) => (\n                    <Grid\n                        item\n                        style={pixelMap[pixel]}\n                        onClick={() => dispatch(selectPixel({ x: colIndex, y: rowIndex }))}\n                        key={(rowIndex + 1) * (colIndex + 1)} />\n                ))\n            }\n            </Grid>           \n        ))\n    }\n    </Grid>\n);\n\nexport default RasterDisplay;","import Color from '../types/Color';\nimport PixelStyle from '../types/PixelStyle';\n\nfunction pixelStyle(color: Color, width: number, height: number): PixelStyle {\n    return {\n        backgroundColor: color,\n        minWidth: width,\n        minHeight: height,\n        border: '1px solid white'\n    };\n}\n\nexport default pixelStyle;","import PixelKind from '../types/PixelKind';\nimport PixelMap from '../types/PixelMap';\nimport ColorMap from '../types/ColorMap';\nimport pixelStyle from './pixelStyle';\n\nfunction pixelMap(colorMap: ColorMap, width: number, height: number): PixelMap {\n    return {\n        [PixelKind.Background]: pixelStyle(colorMap[PixelKind.Background], width, height),\n        [PixelKind.Fill]: pixelStyle(colorMap[PixelKind.Fill], width, height),\n        [PixelKind.Contour]: pixelStyle(colorMap[PixelKind.Contour], width, height)\n    }\n};\n\nexport default pixelMap;\n","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\n\nconst pixelWidth = createSelector(\n    (state: State) => state.rasterConfig.screenSize.width,\n    (state: State) => state.rasterConfig.rasterDisplay.cols,\n    (width: number, cols: number) => Math.floor(width / cols)\n);\n\nexport default pixelWidth;","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\n\nconst pixelHeight = createSelector(\n    (state: State) => state.rasterConfig.screenSize.height,\n    (state: State) => state.rasterConfig.rasterDisplay.rows,\n    (height: number, rows: number) => Math.floor((height - 61) / rows)\n);\n\nexport default pixelHeight;","import { createSelector } from 'reselect';\nimport { State } from '../reducers/main';\nimport createPixelMap from '../../utility/pixelMap';\nimport pixelWidth from './pixelWidth';\nimport pixelHeight from './pixelHeight';\n\nconst pixelMap = createSelector(\n    (state: State) => state.rasterConfig.pixelColor,\n    pixelWidth,\n    pixelHeight,\n    createPixelMap\n);\n\nexport default pixelMap;","import { connect } from 'react-redux';\nimport RasterDisplay from '../RasterDisplay';\nimport { State } from '../../store/reducers/main';\nimport pixelMap from '../../store/selectors/pixelMap';\n\nconst Display = connect(\n    (state: State) => ({\n        raster: state.rasterConfig.rasterDisplay.display,\n        pixelMap: pixelMap(state)\n    }),\n)(RasterDisplay);\n\nexport default Display;","import Color from '../types/Color';\n\nconst colors = [\n    Color.Blue,\n    Color.Crimson,\n    Color.DarkCyan,\n    Color.DarkGreen,\n    Color.DarkOrange,\n    Color.DodgerBlue,\n    Color.Gold,\n    Color.Green,\n    Color.LawnGreen,\n    Color.LightSeaGreen,\n    Color.MediumBlue,\n    Color.Orange,\n    Color.Red,\n    Color.Purple,\n    Color.SteelBlue,\n    Color.Indigo,\n    Color.FireBrick,\n    Color.DarkMagenta\n];\n\nexport default colors;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Color from '../types/Color';\nimport colors from '../utility/colors';\n\ninterface Props {\n    label: string\n    selected: Color,\n    removeColor1: Color,\n    removeColor2: Color,\n    onChange: (newColor: Color) => void\n};\n\nconst useStyles = makeStyles({\n    select: {\n        color: (props: Props) => props.selected\n    }\n});\n\nconst ColorPicker: React.FC<Props> = props => {\n    const classes = useStyles(props);\n    const labelId = 'color-picker-' + props.label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{props.label}</InputLabel>\n            <Select\n                classes={{\n                    select: classes.select\n                }}\n                labelId={labelId}\n                value={props.selected}\n                onChange={handleChange(props.selected, props.onChange)}\n            >\n                {colors.filter(c => c !== props.removeColor1 && c !== props.removeColor2).map((color, index) => (\n                    <MenuItem key={`${index}-${color}`}  value={color} style={{ color }}>{color}</MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default ColorPicker;\n\nfunction handleChange(color: Color, handler: (newColor: Color) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newColor = event.target.value as Color;\n        if(newColor !== color){\n            handler(newColor);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setBackgroundColor } from '../../store/actions/SetPixelColor';\n\nconst BackgroundColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Background',\n        selected: pixelColor[PixelKind.Background],\n        removeColor1: pixelColor[PixelKind.Fill],\n        removeColor2: pixelColor[PixelKind.Contour]\n    }),\n    { onChange: setBackgroundColor }\n)(ColorPicker)\n\nexport default BackgroundColor;","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setFillColor } from '../../store/actions/SetPixelColor';\n\nconst FillColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Fill',\n        selected: pixelColor[PixelKind.Fill],\n        removeColor1: pixelColor[PixelKind.Background],\n        removeColor2: pixelColor[PixelKind.Contour]\n    }),\n    { onChange: setFillColor }\n)(ColorPicker)\n\nexport default FillColor;","import { connect } from 'react-redux';\nimport ColorPicker from '../ColorPicker';\nimport { State } from '../../store/reducers/main';\nimport PixelKind from '../../types/PixelKind';\nimport { setContourColor } from '../../store/actions/SetPixelColor';\n\nconst ContourColor = connect(\n    ({ rasterConfig: { pixelColor } }: State) => ({\n        label: 'Contour',\n        selected: pixelColor[PixelKind.Contour],\n        removeColor1: pixelColor[PixelKind.Fill],\n        removeColor2: pixelColor[PixelKind.Background]\n    }),\n    { onChange: setContourColor }\n)(ColorPicker)\n\nexport default ContourColor;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\ninterface Props {\n    label: string\n    value: number,\n    onChange: (newValue: number) => void\n};\n\nconst counts = generateCounts().map((count, index) => <MenuItem value={count} key={index}>{count}</MenuItem>);\n\nconst PixelCount: React.FC<Props> = ({label, value, onChange}) => {\n    const labelId = 'pixel-count-' + label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{label}</InputLabel>\n            <Select\n                labelId={labelId}\n                value={value}\n                onChange={handleChange(value, onChange)}\n            >\n                {counts}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default PixelCount;\n\nfunction generateCounts(): number[] {\n    const counts = new Array(80 - 10 + 1);\n    for(let i = 10; i <= 80; ++i) {\n        counts[i - 10] = i;\n    }\n    return counts;\n}\n\nfunction handleChange(val: number, handler: (newVal: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newVal = event.target.value as number;\n        if(newVal !== val){\n            handler(newVal);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport PixelCount from '../PixelCount';\nimport { State } from '../../store/reducers/main';\nimport { setRasterDisplayRows } from '../../store/actions/SetRasterDisplayRows';\n\nconst RowsCount = connect(\n    (state: State) => ({\n        label: 'Rows',\n        value: state.rasterConfig.rasterDisplay.rows\n    }),\n    { onChange: setRasterDisplayRows }\n)(PixelCount);\n\nexport default RowsCount;","import { connect } from 'react-redux';\nimport PixelCount from '../PixelCount';\nimport { State } from '../../store/reducers/main';\nimport { setRasterDisplayCols } from '../../store/actions/SetRasterDisplayCols';\n\nconst ColsCount = connect(\n    (state: State) => ({\n        label: 'Cols',\n        value: state.rasterConfig.rasterDisplay.cols\n    }),\n    { onChange: setRasterDisplayCols }\n)(PixelCount);\n\nexport default ColsCount;","import { State } from '../reducers/main';\n\nfunction disableConfig(state: State): boolean {\n    return !state.config;\n}\n\nexport default disableConfig;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { changeConfig } from '../../store/actions/ChangeConfig';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport { State } from '../../store/reducers/main';\n\ninterface Props {\n    configRaster: boolean,\n    disabled: boolean,\n    changeConfig: () => void\n}\n\nconst ChangeConfig: React.FC<Props> = props => (\n    <Button\n        color={props.configRaster ? \"primary\" : \"secondary\"}\n        onClick={props.changeConfig}\n        variant={props.configRaster ? \"contained\" : \"outlined\"}\n        disabled={props.disabled}>\n        {props.configRaster ? \"Next\" : \"Back\"}\n    </Button>\n);\n\nconst Connected = connect(\n    (state: State) => ({ disabled: disableConfig(state) }),\n    { changeConfig }\n)(ChangeConfig);\n\nexport default Connected;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport BackgroundColor from './connected/BackgroudColor';\nimport FillColor from './connected/FillColor';\nimport ContourColor from './connected/ContourColor';\nimport RowsCount from './connected/RowsCount';\nimport ColsCount from './connected/ColsCount';\nimport ChangeConfig from './connected/ChangeConfig';\n\nconst RasterConfig: React.FC = () => (\n    <Grid container direction='row' justify='space-evenly' alignItems='center'>\n        <Grid item><BackgroundColor/></Grid>\n        <Grid item><FillColor/></Grid>\n        <Grid item><ContourColor/></Grid>\n        <Grid item><RowsCount/></Grid>\n        <Grid item><ColsCount/></Grid>\n        <Grid item><ChangeConfig configRaster/></Grid>\n    </Grid>\n);\n\nexport default RasterConfig;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Task from '../../types/Task';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setTask } from '../../store/actions/SetTask';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport task from '../../store/selectors/task';\n\ninterface Props {\n    task: Task,\n    disabled: boolean,\n    onTaskChange: (task: Task) => void\n};\n\nconst TaskSelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"task\">{\"Task\"}</InputLabel>\n            <Select\n                labelId=\"task\"\n                value={props.task}\n                disabled={props.disabled}\n                onChange={handleChange(props.task, props.onTaskChange)}\n            >\n                <MenuItem value={Task.Task1}>{\"Task 1\"}</MenuItem>\n                <MenuItem value={Task.Task2}>{\"Task 2\"}</MenuItem>\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(task: Task, handler: (newTask: Task) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newTask = event.target.value as Task;\n        if(newTask !== task){\n            handler(newTask);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ task: task(state), disabled: disableConfig(state) }),\n    { onTaskChange: setTask }\n)(TaskSelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setDelay } from '../../store/actions/SetDelay';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport delay from '../../store/selectors/delay';\n\ninterface Props {\n    delay: number,\n    disabled: boolean,\n    onDelayChange: (delay: number) => void\n};\n\nconst options\n= [100, 200, 300, 500, 700, 800, 1000, 1200, 1500]\n.map(\ndelay => (<MenuItem key={delay} value={delay}>\n    {delay < 1000 ? `${delay} ms` : `${delay / 1000} sec` }\n</MenuItem>)\n);\n\nconst DelaySelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"delay\">{\"Delay\"}</InputLabel>\n            <Select\n                labelId=\"delay\"\n                value={props.delay}\n                disabled={props.disabled}\n                onChange={handleChange(props.delay, props.onDelayChange)}\n            >\n                {options}\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(delay: number, handler: (newDelay: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newDelay = event.target.value as number;\n        if(newDelay !== delay){\n            handler(newDelay);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ delay: delay(state), disabled: disableConfig(state) }),\n    { onDelayChange: setDelay }\n)(DelaySelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport { setDashLength } from '../../store/actions/SetDashLength';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport dashLength from '../../store/selectors/dashLength';\n\ninterface Props {\n    dashLength: number,\n    disabled: boolean,\n    onDelayChange: (dashLength: number) => void\n};\n\nconst options\n= [1, 2, 3, 4, 5]\n.map(\nlength => (<MenuItem key={length} value={length}>{`${length} pixels`}</MenuItem>)\n);\n\nconst DashLengthSelect: React.FC<Props> = props => {\n    return (\n        <FormControl>\n            <InputLabel id=\"dash-length\">{\"Dash\"}</InputLabel>\n            <Select\n                labelId=\"dash-length\"\n                value={props.dashLength}\n                disabled={props.disabled}\n                onChange={handleChange(props.dashLength, props.onDelayChange)}\n            >\n                {options}\n            </Select>\n        </FormControl>\n    );\n};\n\nfunction handleChange(dashLength: number, handler: (newDashLength: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newDashLength = event.target.value as number;\n        if(newDashLength !== dashLength){\n            handler(newDashLength);\n        }\n    };\n}\n\nconst Connected = connect(\n    (state: State) => ({ dashLength: dashLength(state), disabled: disableConfig(state) }),\n    { onDelayChange: setDashLength }\n)(DashLengthSelect);\n\nexport default Connected;","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\ninterface Props {\n    label: string\n    value: number,\n    disabled: boolean,\n    onChange: (newValue: number) => void\n};\n\nconst counts = [1, 2, 3, 4, 5].map((count, index) => <MenuItem value={count} key={index}>{count}</MenuItem>);\n\nconst PointerDimention: React.FC<Props> = ({label, value, disabled, onChange}) => {\n    const labelId = 'pointer-' + label;\n\n    return (\n        <FormControl>\n            <InputLabel id={labelId}>{label}</InputLabel>\n            <Select\n                labelId={labelId}\n                value={value}\n                disabled={disabled}\n                onChange={handleChange(value, onChange)}\n            >\n                {counts}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default PointerDimention;\n\nfunction handleChange(val: number, handler: (newVal: number) => void) {\n    return (event: { target: {value: unknown }}) => {\n        const newVal = event.target.value as number;\n        if(newVal !== val){\n            handler(newVal);\n        }\n    };\n}","import { connect } from 'react-redux';\nimport PointerDimention from '../PointerDimention';\nimport { State } from '../../store/reducers/main';\nimport setPointerWidth from '../../store/actions/SetPointerWidth';\nimport pointerWidth from '../../store/selectors/pointerWidth';\nimport disableConfig from '../../store/selectors/disableConfig';\n\nconst PointerWidth = connect(\n    (state: State) => ({\n        label: 'Width',\n        disabled: disableConfig(state),\n        value: pointerWidth(state)\n    }),\n    { onChange: setPointerWidth }\n)(PointerDimention);\n\nexport default PointerWidth;","import { connect } from 'react-redux';\nimport PointerDimention from '../PointerDimention';\nimport { State } from '../../store/reducers/main';\nimport setPointerHeight from '../../store/actions/SetPointerHeight';\nimport pointerHeight from '../../store/selectors/pointerHeight';\nimport disableConfig from '../../store/selectors/disableConfig';\n\nconst PointerHeight = connect(\n    (state: State) => ({\n        label: 'Height',\n        disabled: disableConfig(state),\n        value: pointerHeight(state)\n    }),\n    { onChange: setPointerHeight }\n)(PointerDimention);\n\nexport default PointerHeight;","import { createSelector } from 'reselect';\nimport task from './task';\nimport selectedPixels from './selectedPixels';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nconst selector = {\n    [Task.Task1]: (selected: SelectedPixels) => {\n        switch(selected.size) {\n            case 0: return 'Select line edges';\n            case 1: return 'Selected 1/2 points';\n            default: return 'Line edges selected';\n        }\n    },\n    [Task.Task2]: (selected: SelectedPixels) => {\n        switch(selected.size) {\n            case 0: return 'Select circle center';\n            case 1: return 'Select circle end point';\n            default: return 'Circle center and radius selected';\n        }\n    }\n};\n\nconst taskState = createSelector(\n    task,\n    selectedPixels,\n    (currentTask, selected) => selector[currentTask](selected)\n);\n\nexport default taskState;","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport taskState from '../../store/selectors/taskState';\nimport disableConfig from '../../store/selectors/disableConfig';\n\ninterface Props {\n    feedback: string,\n    disable: boolean\n};\n\nconst Feedback: React.FC<Props> = ({ feedback, disable }) => {\n    return (\n        <Chip variant=\"outlined\" color={disable ? \"inherit\" : \"primary\"} label={feedback} />\n    );\n};\n\nconst TaskFeedback = connect(\n    (state: State) => ({ feedback: taskState(state), disable: disableConfig(state) }),\n)(Feedback);\n\nexport default TaskFeedback;","import { createSelector } from 'reselect';\nimport task from './task';\nimport selectedPixels from './selectedPixels';\nimport Task from '../../types/Task';\nimport SelectedPixels from '../../types/SelectedPixels';\n\nfunction canDrawTask1or2(selected: SelectedPixels): boolean {\n    return selected.size === 2;\n}\n\nconst selector = {\n    [Task.Task1]: canDrawTask1or2,\n    [Task.Task2]: canDrawTask1or2\n};\n\nconst canDraw = createSelector(\n    task,\n    selectedPixels,\n    (currentTask, selected) => selector[currentTask](selected)\n);\n\nexport default canDraw;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport canDraw from '../../store/selectors/canDraw';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport draw from '../../store/actions/Draw';\n\ninterface Props {\n    canDraw: boolean,\n    disabled: boolean,\n    draw: () => void\n};\n\nconst DrawButton: React.FC<Props> = ({ canDraw, draw, disabled }) => {\n    return (\n        <Button variant=\"contained\" color=\"primary\" disabled={!canDraw || disabled} onClick={draw}>\n            Draw\n        </Button>\n    );\n};\n\nconst Connected = connect(\n    (state: State) => ({ canDraw: canDraw(state), disabled: disableConfig(state) }),\n    { draw }\n)(DrawButton);\n\nexport default Connected;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport disableConfig from '../../store/selectors/disableConfig';\nimport clearRasterDisplay from '../../store/actions/ClearRasterDisplay';\n\ninterface Props {\n    disabled: boolean,\n    clear: () => void\n};\n\nconst ClearButton: React.FC<Props> = ({ disabled, clear }) => {\n    return (\n        <Button variant=\"outlined\" color=\"secondary\" disabled={disabled} onClick={clear}>\n            Clear\n        </Button>\n    );\n};\n\nconst Connected = connect(\n    (state: State) => ({ disabled: disableConfig(state) }),\n    { clear: clearRasterDisplay }\n)(ClearButton);\n\nexport default Connected;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Task from './Task';\nimport TaskEnum from '../../types/Task';\nimport ChangeConfig from './ChangeConfig';\nimport Delay from './Delay';\nimport DashLength from './DashLength';\nimport PointerWidth from './PointerWidth';\nimport PointerHeight from './PointerHeight';\nimport TaskFeedback from './TaskFeedback';\nimport DrawButton from './DrawButton';\nimport ClearButton from './ClearButton';\nimport { connect } from 'react-redux';\nimport { State } from '../../store/reducers/main';\nimport task from '../../store/selectors/task';\n\ninterface Props {\n    task: TaskEnum\n}\n\nconst TaskConfig: React.FC<Props> = ({task}) => (\n    <Grid container direction='row' justify='space-evenly' alignItems='center'>\n        <Grid item><ChangeConfig configRaster={false}/></Grid>\n        <Grid item><Task/></Grid>\n        <Grid item><Delay/></Grid>\n        {task === TaskEnum.Task1 ? <Grid item><DashLength/></Grid> : null}\n        {task === TaskEnum.Task2 ? <Grid item><PointerHeight/></Grid> : null}\n        {task === TaskEnum.Task2 ? <Grid item><PointerWidth/></Grid> : null}\n        <Grid item><TaskFeedback /></Grid>\n        <Grid item><DrawButton /></Grid>\n        <Grid item><ClearButton /></Grid>\n    </Grid>\n);\n\nconst Connected = connect(\n    (state: State) => ({ task: task(state) }),\n)(TaskConfig);\n\nexport default Connected;","import React from 'react';\nimport MuiToolbar from '@material-ui/core/Toolbar';\nimport RasterConfig from './../RasterConfig';\nimport TaskConfig from './TaskConfig';\nimport { State } from '../../store/reducers/main';\nimport { connect } from 'react-redux';\n\ninterface Props {\n    configRaster: boolean;\n};\n\nconst Toolbar: React.FC<Props> = ({configRaster}) => (\n    <MuiToolbar>\n        {configRaster ? <RasterConfig /> : <TaskConfig />}\n    </MuiToolbar>\n);\n\nconst Connected = connect(\n    ({ configRaster }: State) => ({ configRaster })\n)(Toolbar);\n\nexport default Connected;","import React from 'react';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport Toolbar from './connected/Toolbar';\n\nconst AppBar: React.FC = () => (\n    <MuiAppBar position='static' color='default'>\n        <Toolbar />\n    </MuiAppBar>\n);\n\nexport default AppBar;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configure';\nimport RasterDisplay from './components/connected/Display';\nimport AppBar from './components/AppBar';\n\nconst baseTheme = createMuiTheme();\n\nconst appTheme = createMuiTheme({\n    ...baseTheme,\n    typography: {\n        fontSize: 24\n    }\n});\n\nconst store = configureStore();\n\nconst App: React.FC = () => (\n    <ThemeProvider theme={appTheme}>\n        <CssBaseline />\n        <div style={{width: '100%', height: '100%'}}>\n            <Provider store={store}>\n                <AppBar />\n                <RasterDisplay />\n            </Provider>\n        </div> \n    </ThemeProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}